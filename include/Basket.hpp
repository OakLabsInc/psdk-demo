// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from com_verifone_commerce_entities.djinni

#pragma once

#include <memory>
#include <optional>
#include <string>
#include <vector>

namespace verifone_sdk {

class Donation;
class Merchandise;
class Offer;

/**
 * Represents all of the items that have been added to the basket. Adding items
 * should generally be performed through the {@link com.verifone.payment_sdk.BasketManager},
 * so that the display is updated and the appropriate events are sent. This
 * object is useful to store the current basket, save it for later, then quickly
 * restore all of the items to the screen, in case an order is put on hold and
 * then retrieved. See {@link com.verifone.payment_sdk.BasketManager#registerBasket}
 * for the method to restore a basket to the screen.
 */
class Basket {
public:
    virtual ~Basket() {}

    static std::shared_ptr<Basket> create();

    /** Refer to {@link #setLoyaltyId(String loyaltyId)} for more information. */
    virtual std::optional<std::string> getLoyaltyId() const = 0;

    /**
     * Get the invoice Id associated with this transaction and basket,
     * which is intended to link a set of payments together.
     */
    virtual std::optional<std::string> getInvoiceId() const = 0;

    /** Refer to {@link #setMerchandises(Merchandise[] merchandises)} for more information. */
    virtual std::vector<std::shared_ptr<Merchandise>> getMerchandise() const = 0;

    /** Refer to {@link #setOffers(Offer[] offers)} for more information. */
    virtual std::vector<std::shared_ptr<Offer>> getOffers() const = 0;

    /**
     * Get any donations associated with this basket. These may change
     * throughout the transaction.
     */
    virtual std::vector<std::shared_ptr<Donation>> getDonations() const = 0;

    /** Clears all of the items from this object. */
    virtual void clear() = 0;

    /**
     * The loyalty ID associated with this transaction and basket.
     * This is set by the initiator of the transaction as the probable ID, and
     * may be updated during the transaction process. This is optional.
     */
    virtual void setLoyaltyId(const std::optional<std::string> & loyaltyId) = 0;

    /**
     * Set the invoice Id associated with this transaction and basket,
     * which is intended to link a set of payments together.
     */
    virtual void setInvoiceId(const std::optional<std::string> & invoiceId) = 0;

    /**
     * The merchandise that is being purchased or returned. This
     * should only be set by the POS
     * or payment application. This is optional.
     */
    virtual void setMerchandise(const std::vector<std::shared_ptr<Merchandise>> & merchandise) = 0;

    /**
     * Any offers associated with this basket. These may change
     * throughout the transaction.
     * This is optional.
     */
    virtual void setOffers(const std::vector<std::shared_ptr<Offer>> & offers) = 0;

    /**
     * Any donations associated with this basket. These may change
     * throughout the transaction.
     * This is optional.
     */
    virtual void setDonations(const std::vector<std::shared_ptr<Donation>> & donations) = 0;
};

}  // namespace verifone_sdk
