// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from Transaction.djinni

#pragma once

#include <cstdint>
#include <memory>
#include <optional>
#include <psdk/export.h>
#include <string>
#include <vector>

namespace verifone_sdk {

class AmountTotals;
class Basket;
class Payment;
enum class KeyedEntryPromptOption;
enum class OriginatorType;
struct Decimal;

/**
 * Transaction related informations
 * Setting the fields is only relevant when sending the data to the terminal, and conversely,
 * getting the fields is only relevant when receiving this object from the terminal.
 * <p>
 * A word on subtotals. In North America, we automatically calculate the subtotal by subtracting
 * tax and gratuity from the total amount, but leaving donation amounts included.
 */
class PSDK_EXPORT Transaction {
public:
    virtual ~Transaction() {}

    /** Factory method to create Transaction instance */
    static std::shared_ptr<Transaction> create();

    /** Returns either {@link OriginatorType OriginatorType} */
    virtual std::optional<OriginatorType> getOriginator() const = 0;

    /** Get the acquirer's merchant ID if available, otherwise returns null. */
    virtual std::optional<std::string> getAcquirerMerchantId() const = 0;

    /** Get the acquirer's terminal ID if available, otherwise returns null */
    virtual std::optional<std::string> getAcquirerTerminalId() const = 0;

    /** Get the ID for the acquirer if available, otherwise returns null. */
    virtual std::optional<std::string> getAcquirerId() const = 0;

    /** Get the gateway's merchant ID if available, otherwise returns null */
    virtual std::optional<std::string> getGatewayMerchantId() const = 0;

    /** Get the gateway's terminal ID if available, otherwise returns null. */
    virtual std::optional<std::string> getGatewayTerminalId() const = 0;

    /**
     * The ID of the invoice. This is generated by the system if not provided, and cannot be
     * changed. The Invoice is an abstract structure containing relevant transactions, a basket,
     * and payments.
     */
    virtual std::optional<std::string> getInvoiceId() const = 0;

    /** Deprecated. Please use {@link #getInvoiceId()} instead. */
    virtual std::optional<std::string> getTransactionId() const = 0;

    /**
     * The ID of a referenced transaction. Generally useful in the case of
     * {@link #VOID_TYPE} or {@link #PRE_AUTHORISATION_COMPLETION_TYPE},
     * referencing the original transaction as the reference transaction for voiding or completing.
     */
    virtual std::optional<std::string> getReferenceTransactionId() const = 0;

    /** The ID of the venue. This is optional. */
    virtual std::optional<std::string> getVenue() const = 0;

    /** The ID of the lane for this device. This is optional. */
    virtual std::optional<std::string> getLane() const = 0;

    /** The ID of the cashier that is starting the current session. This is optional. */
    virtual std::optional<std::string> getCashierId() const = 0;

    /**
     * The display name of the cashier, to be used when printing the receipt or otherwise
     * displaying cashier information. This is optional.
     */
    virtual std::optional<std::string> getCashierDisplayName() const = 0;

    /**
     * The total amount of the transaction to be paid by the customer as a GAAP-standard BigDecimal.
     * This amount may change throughout the transaction depending on basket modifications,
     * discounts, offers, or other interactions by other applications. This is required.
     */
    virtual std::optional<Decimal> getAmount() const = 0;

    /**
     * The total tax amount applied as a GAAP-standard BigDecimal. This amount may change
     * throughout the transaction depending on basket modifications, discounts, offers, or other
     * interactions by other applications. This is optional.
     */
    virtual std::optional<Decimal> getTaxAmount() const = 0;

    /**
     * The total tip/gratuity amount as a GAAP-standard BigDecimal. This amount may change
     * throughout the transaction depending on basket modifications, discounts, offers, or
     * other interactions by other applications. This is optional.
     */
    virtual std::optional<Decimal> getGratuityAmount() const = 0;

    /**
     * The total donation amount as a GAAP-standard BigDecimal. This amount may change throughout
     * the transaction depending on basket modifications, discounts, offers, or other interactions
     * by other applications. This is optional.
     */
    virtual std::optional<Decimal> getDonationAmount() const = 0;

    /** The shift ID provided for this session. */
    virtual int32_t getShiftId() const = 0;

    /** Refer to {@link #setCurrency(String currency)} */
    virtual std::optional<std::string> getCurrency() const = 0;

    /** Refer to {@link #setAllowsKeyedEntry(boolean allowsKeyedEntry)} */
    virtual bool getAllowsKeyedEntry() const = 0;

    /**
     * The language of the customer. This may be added during or after the transaction.
     * This is optional.
     */
    virtual std::optional<std::string> getCustomerLanguage() const = 0;

    /**
     * The phone number of the customer. This may be added during or after the transaction.
     * This is optional.
     */
    virtual std::optional<std::string> getCustomerPhoneNumber() const = 0;

    /**
     * The email address of the customer. This may be added during or after the transaction.
     * This is optional.
     */
    virtual std::optional<std::string> getCustomerEmail() const = 0;

    /**
     * The payments applied to the transaction amount in the order they are initiated. This will
     * update throughout the transaction, as the payment application may handle multiple tenders,
     * or other applications may contribute alternate forms of payment.
     */
    virtual std::vector<std::shared_ptr<Payment>> getPayments() const = 0;

    /** Refer to {@link #setKeyedPromptOptions(KeyedEntryPromptOption[] promptOptions)} */
    virtual std::vector<KeyedEntryPromptOption> getKeyedEntryPromptOptions() const = 0;

    /**
     * The basket currently associated with the transaction. The actual object may update over
     * time as it is changed through the AIDL communications with the service and updated by the
     *  Basket Manager, but the contents will stay intact.
     */
    virtual std::shared_ptr<Basket> getBasket() const = 0;

    /**
     * A reference transaction. Generally useful in the case of {@link #VOID_TYPE} or
     * {@link #PRE_AUTHORISATION_COMPLETION_TYPE}, include the original
     * transaction as the reference transaction for voiding or completing.
     */
    virtual std::shared_ptr<Transaction> getReferenceTransaction() const = 0;

    /**
     * Creates a new AmountTotals object based off of the current values. See
     * {@link #setAmountTotals(AmountTotals)}.
     */
    virtual std::shared_ptr<AmountTotals> getAmountTotals() const = 0;

    /** Set either {@link #OriginatorType} */
    virtual void setOriginator(std::optional<OriginatorType> originator) = 0;

    /** Set the acquirer's merchant ID if available */
    virtual void setAcquirerMerchantId(const std::optional<std::string> & merchantId) = 0;

    /** Set the acquirer's terminal ID if available */
    virtual void setAcquirerTerminalId(const std::optional<std::string> & terminalId) = 0;

    /** Set the ID for the acquirer if available */
    virtual void setAcquirerId(const std::optional<std::string> & acquirerId) = 0;

    /** Set the gateway's merchant ID if available */
    virtual void setGatewayMerchantId(const std::optional<std::string> & merchantId) = 0;

    /** Set the gateway's terminal ID if available */
    virtual void setGatewayTerminalId(const std::optional<std::string> & terminalId) = 0;

    /**
     * The ID of the invoice. This is generated by the system if not provided, and cannot be
     * changed. The Invoice is an abstract structure containing relevant transactions, a basket,
     * and payments.
     */
    virtual void setInvoiceId(const std::optional<std::string> & invoiceId) = 0;

    /** Deprecated. Please use {@link #setInvoiceId()} instead. */
    virtual void setTransactionId(const std::optional<std::string> & transactionId) = 0;

    /**
     * The ID of a referenced transaction. Generally useful in the case of
     * {@link #VOID_TYPE} or {@link #PRE_AUTHORISATION_COMPLETION_TYPE},
     * referencing the original transaction as the reference transaction for voiding or completing.
     */
    virtual void setReferenceTransactionId(const std::optional<std::string> & transactionId) = 0;

    /** The ID of the venue. This is optional. */
    virtual void setVenue(const std::optional<std::string> & venue) = 0;

    /** The ID of the lane for this device. This is optional */
    virtual void setLane(const std::optional<std::string> & lane) = 0;

    /** Refer to getCashierId(). */
    virtual void setCashierId(const std::optional<std::string> & cashierId) = 0;

    /**
     * The display name of the cashier, to be used when printing the receipt or otherwise
     * displaying cashier information. This is optional.
     */
    virtual void setCashierDisplayName(const std::optional<std::string> & displayName) = 0;

    /** Set shift id. This is optional. */
    virtual void setShiftId(int32_t shiftId) = 0;

    /**
     * The base currency for the transaction. This value should not change after the
     * transaction is started. This is required.
     */
    virtual void setCurrency(const std::optional<std::string> & currency) = 0;

    /**
     * Determines if the payment application on the terminal will accept keyed
     * entry of card data for payment. Defaults to false. This is required if
     * keyed entry is desired for a specific payment.
     */
    virtual void setAllowsKeyedEntry(bool allowsKeyedEntry) = 0;

    /**
     * The language of the customer. This may be added during or after the transaction.
     * This is optional.
     */
    virtual void setCustomerLanguage(const std::optional<std::string> & language) = 0;

    /**
     * The phone number of the customer. This may be added during or after the transaction.
     * This is optional.
     */
    virtual void setCustomerPhoneNumber(const std::optional<std::string> & phoneNumber) = 0;

    /**
     * The email address of the customer. This may be added during or after the transaction.
     * This is optional.
     */
    virtual void setCustomerEmail(const std::optional<std::string> & email) = 0;

    /** See getPayments(); */
    virtual void setPayments(const std::vector<std::shared_ptr<Payment>> & payments) = 0;

    /**
     * Sets the prompt options desired when keying-in the card information.
     * Meaningful only when allowsKeyedEntry is true.
     */
    virtual void setKeyedEntryPromptOptions(const std::vector<KeyedEntryPromptOption> & promptOptions) = 0;

    /** Refer to {@link #getBasket()}. */
    virtual void setBasket(const std::shared_ptr<Basket> & basket) = 0;

    /**  Refer to {@link #getReferenceTransaction()}. */
    virtual void setReferenceTransaction(const std::shared_ptr<Transaction> & transaction) = 0;

    /**
     * Allows updating all of the totals at once. If null, resets the amounts back to their
     * default values.
     */
    virtual void setAmountTotals(const std::shared_ptr<AmountTotals> & amountTotals) = 0;
};

}  // namespace verifone_sdk
