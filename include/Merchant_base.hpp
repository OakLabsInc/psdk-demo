// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from Merchant.djinni

#pragma once

#include "Acquirer.hpp"
#include "AlternativePaymentMethod.hpp"
#include "Decimal.hpp"
#include <optional>
#include <psdk/export.h>
#include <string>
#include <unordered_map>
#include <utility>
#include <vector>

namespace verifone_sdk {

struct Merchant; // Requiring extended class

/** Represents a merchant. */
struct PSDK_EXPORT MerchantBase {

    /**
     * Deprecated on 2021-07-31.
     * name of the merchant
     */
    static std::string const MERCHANT_NAME_COLUMN;

    /**
     * Deprecated on 2021-07-31.
     * address of the merchant
     */
    static std::string const MERCHANT_ADDRESS_COLUMN;

    /** Registered identifier */
    static std::string const REGISTERED_IDENTIFIER_KEY;

    /** Name of the merchant */
    static std::string const COMMON_NAME_KEY;

    /** The address of the merchant */
    static std::string const ADDRESS_KEY;

    /** The ISO 3166-1 country code where the merchant is operating */
    static std::string const COUNTRY_CODE_KEY;

    /** The ISO18245 category code for the merchant */
    static std::string const MERCHANT_CATEGORY_CODE_KEY;

    /** If this merchant is the primary merchant on the POI */
    static std::string const PRIMARY_FLAG_KEY;

    /** Balance Enquiry Enabled */
    static std::string const BALANCE_ENQUIRY_FLAG_KEY;

    /** Cashout Ceiling */
    static std::string const CASHOUT_CEILING_KEY;

    /** Cash out only enabled */
    static std::string const CASHOUT_ONLY_ENABLED_FLAG_KEY;

    /** Force offline Enabled */
    static std::string const FORCE_OFFLINE_ENABLED_FLAG_KEY;

    /** Manual Pre auth enabled */
    static std::string const MANUAL_PREAUTH_ENABLED_FLAG_KEY;

    /** Manual Purchase Enabled */
    static std::string const MANUAL_PURCHASE_ENABLED_FLAG_KEY;

    /** Manual Refund Enabled */
    static std::string const MANUAL_REFUND_ENABLED_FLAG_KEY;

    /** Maximum purchase Amount */
    static std::string const MAX_PURCHASE_AMOUNT_KEY;

    /** Moto Payment Enabled */
    static std::string const MOTO_PAYMENT_ENABLED_FLAG_KEY;

    /** Moto Refund Enabled */
    static std::string const MOTO_REFUND_ENABLED_FLAG_KEY;

    /** Phone number */
    static std::string const PHONE_NUMBER_KEY;

    /** Pre Auth Enabled */
    static std::string const PREAUTH_ENABLED_FLAG_KEY;

    /** Purchase And Cash out Enabled */
    static std::string const PURCHASE_AND_CASHOUT_ENABLED_FLAG_KEY;

    /** Purchase Enabled */
    static std::string const PURCHASE_ENABLED_FLAG_KEY;

    /** Refund Enabled */
    static std::string const REFUND_ENABLED_FLAG_KEY;

    /** Tip Prompt Enabled */
    static std::string const TIP_PROMPT_ENABLED_FLAG_KEY;

    /** Void Enabled */
    static std::string const VOID_ENABLED_FLAG_KEY;

    /**
     * Merchant Type
     * Use config() and this key to get it
     */
    static std::string const MERCHANT_TYPE_KEY;
    /**
     * Deprecated on 2021-07-31. Please use config() and REGISTERED_IDENTIFIER_KEY instead.
     * record id of the merchant
     */
    std::optional<std::string> recordId;
    /**
     * Deprecated on 2021-07-31. Please use config() and COMMON_NAME_KEY instead.
     * The name of the merchant as set by the merchant.
     */
    std::optional<std::string> merchantName;
    /**
     * Deprecated on 2021-07-31. Please use config() and ADDRESS_KEY instead.
     * The address of the merchant
     */
    std::optional<std::string> merchantAddress;
    /**
     * Deprecated on 2021-07-31. Please use config() and COUNTRY_CODE_KEY instead.
     * The ISO 3166-1 country code where the merchant is operating
     */
    std::optional<std::string> countryCode;
    /**
     * Deprecated on 2021-07-31. Please use config() and MERCHANT_CATEGORY_CODE_KEY instead.
     * The ISO18245 category code for the merchant
     */
    std::optional<std::string> merchantCategoryCode;
    /**
     * Deprecated on 2021-07-31. Please use config() and PRIMARY_FLAG_KEY instead.
     * If this merchant is the primary merchant on the POI
     */
    std::optional<bool> isPrimaryFlag;
    /**
     * Deprecated on 2021-07-31. Please use config() and BALANCE_ENQUIRY_FLAG_KEY instead.
     * Balance Enquiry Enabled
     */
    std::optional<bool> isBalanceEnquiry;
    /**
     * Deprecated on 2021-07-31. Please use config() and CASHOUT_CEILING_KEY instead.
     * Cashout Ceiling
     */
    std::optional<Decimal> cashoutCeiling;
    /**
     * Deprecated on 2021-07-31. Please use config() and CASHOUT_ONLY_ENABLED_FLAG_KEY instead.
     * is cash out only enabled
     */
    std::optional<bool> isCashoutOnlyEnabled;
    /**
     * Deprecated on 2021-07-31. Please use config() and FORCE_OFFLINE_ENABLED_FLAG_KEY instead.
     * is Force offline Enabled
     */
    std::optional<bool> isForceOfflineEnabled;
    /**
     * Deprecated on 2021-07-31. Please use config() and MANUAL_PREAUTH_ENABLED_FLAG_KEY instead.
     * is Manual Pre auth enabled
     */
    std::optional<bool> isManualPreAuthEnabled;
    /**
     * Deprecated on 2021-07-31. Please use config() and MANUAL_PURCHASE_ENABLED_FLAG_KEY instead.
     * is Manual Purchase Enabled
     */
    std::optional<bool> isManualPurchaseEnabled;
    /**
     * Deprecated on 2021-07-31. Please use config() and MANUAL_REFUND_ENABLED_FLAG_KEY instead.
     * is Manual Refund Enabled
     */
    std::optional<bool> isManualRefundEnabled;
    /**
     * Deprecated on 2021-07-31. Please use config() and MAX_PURCHASE_AMOUNT_KEY instead.
     * maximum purchase Amount
     */
    std::optional<Decimal> maxPurchaseAmount;
    /**
     * Deprecated on 2021-07-31. Please use config()  and MOTO_PAYMENT_ENABLED_FLAG_KEY instead.
     * isMotoPaymentEnabled
     */
    std::optional<bool> isMotoPaymentEnabled;
    /**
     * Deprecated on 2021-07-31. Please use config() and MOTO_REFUND_ENABLED_FLAG_KEY instead.
     * isMotoRefundEnabled
     */
    std::optional<bool> isMotoRefundEnabled;
    /**
     * Deprecated on 2021-07-31. Please use config() and PHONE_NUMBER_KEY instead.
     * phone number
     */
    std::optional<std::string> phoneNumber;
    /**
     * Deprecated on 2021-07-31. Please use config() and PREAUTH_ENABLED_FLAG_KEY instead.
     * is Pre Auth Enabled
     */
    std::optional<bool> isPreAuthEnabled;
    /**
     * Deprecated on 2021-07-31. Please use config() and PURCHASE_AND_CASHOUT_ENABLED_FLAG_KEY instead.
     * is Purchase And Cash out Enabled
     */
    std::optional<bool> isPurchaseAndCashoutEnabled;
    /**
     * Deprecated on 2021-07-31. Please use config() and PURCHASE_ENABLED_FLAG_KEY instead.
     * is Purchase Enabled
     */
    std::optional<bool> isPurchaseEnabled;
    /**
     * Deprecated on 2021-07-31. Please use config() and REFUND_ENABLED_FLAG_KEY instead.
     * is Refund Enabled
     */
    std::optional<bool> isRefundEnabled;
    /**
     * Deprecated on 2021-07-31. Please use config() and TIP_PROMPT_ENABLED_FLAG_KEY instead.
     * is Tip PRompt Enabled
     */
    std::optional<bool> isTipPromptEnabled;
    /**
     * Deprecated on 2021-07-31. Please use config() and VOID_ENABLED_FLAG_KEY instead.
     * is Void Enabled
     */
    std::optional<bool> isVoidEnabled;
    /** An array of PaymentAcquirerData objects without payment information */
    std::vector<Acquirer> acquirers;
    /** A list of currencies supported by the merchant */
    std::vector<std::string> currencies;
    /** Map of merchant configuration data */
    std::unordered_map<std::string, std::string> config;
    /** List of Alternative Payment Methods */
    std::vector<AlternativePaymentMethod> alternativePaymentMethods;

    MerchantBase(std::optional<std::string> recordId_,
                 std::optional<std::string> merchantName_,
                 std::optional<std::string> merchantAddress_,
                 std::optional<std::string> countryCode_,
                 std::optional<std::string> merchantCategoryCode_,
                 std::optional<bool> isPrimaryFlag_,
                 std::optional<bool> isBalanceEnquiry_,
                 std::optional<Decimal> cashoutCeiling_,
                 std::optional<bool> isCashoutOnlyEnabled_,
                 std::optional<bool> isForceOfflineEnabled_,
                 std::optional<bool> isManualPreAuthEnabled_,
                 std::optional<bool> isManualPurchaseEnabled_,
                 std::optional<bool> isManualRefundEnabled_,
                 std::optional<Decimal> maxPurchaseAmount_,
                 std::optional<bool> isMotoPaymentEnabled_,
                 std::optional<bool> isMotoRefundEnabled_,
                 std::optional<std::string> phoneNumber_,
                 std::optional<bool> isPreAuthEnabled_,
                 std::optional<bool> isPurchaseAndCashoutEnabled_,
                 std::optional<bool> isPurchaseEnabled_,
                 std::optional<bool> isRefundEnabled_,
                 std::optional<bool> isTipPromptEnabled_,
                 std::optional<bool> isVoidEnabled_,
                 std::vector<Acquirer> acquirers_,
                 std::vector<std::string> currencies_,
                 std::unordered_map<std::string, std::string> config_,
                 std::vector<AlternativePaymentMethod> alternativePaymentMethods_)
    : recordId(std::move(recordId_))
    , merchantName(std::move(merchantName_))
    , merchantAddress(std::move(merchantAddress_))
    , countryCode(std::move(countryCode_))
    , merchantCategoryCode(std::move(merchantCategoryCode_))
    , isPrimaryFlag(std::move(isPrimaryFlag_))
    , isBalanceEnquiry(std::move(isBalanceEnquiry_))
    , cashoutCeiling(std::move(cashoutCeiling_))
    , isCashoutOnlyEnabled(std::move(isCashoutOnlyEnabled_))
    , isForceOfflineEnabled(std::move(isForceOfflineEnabled_))
    , isManualPreAuthEnabled(std::move(isManualPreAuthEnabled_))
    , isManualPurchaseEnabled(std::move(isManualPurchaseEnabled_))
    , isManualRefundEnabled(std::move(isManualRefundEnabled_))
    , maxPurchaseAmount(std::move(maxPurchaseAmount_))
    , isMotoPaymentEnabled(std::move(isMotoPaymentEnabled_))
    , isMotoRefundEnabled(std::move(isMotoRefundEnabled_))
    , phoneNumber(std::move(phoneNumber_))
    , isPreAuthEnabled(std::move(isPreAuthEnabled_))
    , isPurchaseAndCashoutEnabled(std::move(isPurchaseAndCashoutEnabled_))
    , isPurchaseEnabled(std::move(isPurchaseEnabled_))
    , isRefundEnabled(std::move(isRefundEnabled_))
    , isTipPromptEnabled(std::move(isTipPromptEnabled_))
    , isVoidEnabled(std::move(isVoidEnabled_))
    , acquirers(std::move(acquirers_))
    , currencies(std::move(currencies_))
    , config(std::move(config_))
    , alternativePaymentMethods(std::move(alternativePaymentMethods_))
    {}

    virtual ~MerchantBase() = default;

protected:
    MerchantBase(const MerchantBase&) = default;
    MerchantBase(MerchantBase&&) = default;
    MerchantBase& operator=(const MerchantBase&) = default;
    MerchantBase& operator=(MerchantBase&&) = default;
};

}  // namespace verifone_sdk
