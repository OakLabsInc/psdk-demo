// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from EncryptionRequest.djinni

#pragma once

#include <cstdint>
#include <memory>
#include <optional>
#include <psdk/export.h>
#include <string>
#include <vector>

namespace verifone_sdk {

enum class EncryptionOptions : unsigned;
enum class EncryptionType;

/**
 * Allows an application to specify how to encrypt either sensitive card
 * information or an entire message for the retrieved ADE encrypted message.
 */
class PSDK_EXPORT EncryptionRequest {
public:
    virtual ~EncryptionRequest() {}

    static std::shared_ptr<EncryptionRequest> create();

    /**Set encryption mode to either data encryption or message encryption */
    virtual void setEncryptionMode(EncryptionType mode) = 0;

    /**Set name of crypto interface */
    virtual void setCryptoInterface(const std::string & name) = 0;

    /**Set hex message to be inserted into EncryptMessage container */
    virtual void setHexMessageField(const std::vector<uint8_t> & value) = 0;

    /**Set text message to be inserted into EncryptMessage container */
    virtual void setTextMessageField(const std::string & value) = 0;

    /** Add TLV values and lengths for EncryptData TLV data */
    virtual void addEncryptDataTags(const std::string & value, int32_t length) = 0;

    /** Set Data Options for EncryptData TLV data */
    virtual void setEncryptDataOptions(EncryptionOptions options) = 0;

    /** Add positional tag values and lengths for EncryptMessage sensitive data */
    virtual void addEncryptMessageTags(const std::string & value, int32_t length, EncryptionOptions options, int32_t position) = 0;

    /** Specify the key to use as hex string */
    virtual void setKeySetId(const std::string & id) = 0;

    /**Set initialization vector as hex string */
    virtual void setInitializationVector(const std::optional<std::string> & iv) = 0;
};

}  // namespace verifone_sdk
