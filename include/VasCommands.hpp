// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from VasCommands.djinni

#pragma once

#include <cstdint>
#include <memory>
#include <optional>
#include <psdk/export.h>
#include <string>
#include <vector>

namespace verifone_sdk {

enum class NfcVasMode;
struct TypeValue;

/**
 * VasCommands
 * Used in XML to communicate directly to the NFC kernel without being forced to use
 * the standard SCA terminal modes
 */
class PSDK_EXPORT VasCommands {
public:
    virtual ~VasCommands() {}

    /** Creates an instance of VasCommands. */
    static std::shared_ptr<VasCommands> create();

    /** ConfigurationType. "Preload_Configuration" or "Dynamic_Configuration". */
    virtual std::string getConfigurationType() const = 0;

    /** Optional configurationVersion . Configuration structure version. */
    virtual std::optional<std::string> getConfigurationVersion() const = 0;

    /** Optional terminalCapabilities . {@link NfcVasMode}. */
    virtual std::optional<NfcVasMode> getTerminalCapabilities() const = 0;

    /** Optional terminalSource . List of acceptable sources(wallets); Source name: "ApplePay". */
    virtual std::optional<std::vector<std::string>> getTerminalSources() const = 0;

    /**
     * Optional pollTech. Keeps an optional json object configuring terminal to poll for
     * "ABF"/"AB"/"AF"/"BF"/"A"/"B"/"F" technologies.
     */
    virtual std::optional<std::string> getPollTech() const = 0;

    /** Optional pollTime . Polling time in milliseconds. */
    virtual std::optional<int32_t> getPollTime() const = 0;

    /** Optional cmdType. "Get" or "Push" VAS data from/to the smart device, default "Get". */
    virtual std::optional<std::string> getCmdType() const = 0;

    /** Optional authParam. Not supported. */
    virtual std::optional<std::string> getAuthParam() const = 0;

    /** Optional encrParam . Not supported. */
    virtual std::optional<std::string> getEncrParam() const = 0;

    /** Optional list of service type. Examples: "Coupon", "Loyalty". */
    virtual std::optional<std::vector<std::string>> getServiceTypes() const = 0;

    /** Optional list of customerData. {@link #TypeValue}. */
    virtual std::optional<std::vector<TypeValue>> getCustomerData() const = 0;

    /** Refer to {@link #getConfigurationType()} */
    virtual void setConfigurationType(const std::string & configurationType) = 0;

    /** Refer to {@link #getConfigurationVersion()} */
    virtual void setConfigurationVersion(const std::optional<std::string> & configurationVersion) = 0;

    /** Refer to {@link #getTerminalCapabilities()} */
    virtual void setTerminalCapabilities(std::optional<NfcVasMode> capabilities) = 0;

    /** Refer to {@link #getTerminalSources()} */
    virtual void setTerminalSources(const std::optional<std::vector<std::string>> & terminalSources) = 0;

    /** Refer to {@link #getPollTech()} */
    virtual void setPollTech(const std::optional<std::string> & pollTech) = 0;

    /** Refer to {@link #getPollTime()} */
    virtual void setPollTime(std::optional<int32_t> pollTime) = 0;

    /** Refer to {@link #getCmdType()} */
    virtual void setCmdType(const std::optional<std::string> & cmdType) = 0;

    /** Refer to {@link #getAuthParam()} */
    virtual void setAuthParam(const std::optional<std::string> & authParam) = 0;

    /** Refer to {@link #getEncrParam()} */
    virtual void setEncrParam(const std::optional<std::string> & encrParam) = 0;

    /** Refer to {@link #getServiceTypes()} */
    virtual void setServiceTypes(const std::optional<std::vector<std::string>> & serviceTypes) = 0;

    /** Refer to {@link #getCustomerData()} */
    virtual void setCustomerData(const std::optional<std::vector<TypeValue>> & customerData) = 0;
};

}  // namespace verifone_sdk
