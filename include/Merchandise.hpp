// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from com_verifone_commerce_entities.djinni

#pragma once

#include <cstdint>
#include <memory>
#include <optional>
#include <string>
#include <vector>

namespace verifone_sdk {

class AmountTotals;
class Modifier;
struct Decimal;

/**
 * This represents the data that is shared between the terminal and the Android application.
 * Setting the fields is only relevant when sending the data to the terminal, and conversely,
 ** getting the fields is only relevant when receiving this object from the terminal.
 */
class Merchandise {
public:
    virtual ~Merchandise() {}

    /** create Merchandise */
    static std::shared_ptr<Merchandise> create();

    /**
     * The unique ID for this merchandise item as it exists in the basket. If multiple items with
     * the same SKU/UPC are added individually to the basket, this basket item ID will be used to
     * distinguish between them. This will be generated by the service if not provided.
     */
    virtual std::optional<std::string> getBasketItemId() const = 0;

    /**
     * The sequence for this item. This is generally auto-incremented as items are added to the
     * basket. This is generally set by the underlying service, but can be set manually if required.
     */
    virtual int32_t getSequence() const = 0;

    /**
     * The display order for this item. This is generally auto-incremented as items are added to
     * the basket, using a gap value to allow insertion between items at a later time.
     */
    virtual int32_t getDisplayOrder() const = 0;

    /**
     * The line to display to the customer. This may include standard tab and line break characters
     * if desired for normal text, or this may use HTML formatting. This will be generated by the
     * service if not provided.
     */
    virtual std::optional<std::string> getDisplayLine() const = 0;

    /** A human-readable name. This is optional. */
    virtual std::optional<std::string> getName() const = 0;

    /** A human-readable description. This is optional. */
    virtual std::optional<std::string> getDescription() const = 0;

    /** SKU of the item. This is optional. */
    virtual std::optional<std::string> getSku() const = 0;

    /** EAN / UPC of the item. This is optional. */
    virtual std::optional<std::string> getUpc() const = 0;

    /**
     * The final total amount for this item as a GAAP-standard BigDecimal, including the
     * extendedPrice, tax, and discount. This is required.
     */
    virtual std::optional<Decimal> getAmount() const = 0;

    /**
     * The tax for this merchandise based on total quantity as a GAAP-standard BigDecimal. This
     * is optional.
     */
    virtual std::optional<Decimal> getTax() const = 0;

    /**
     * Set to true if this item was removed from the basket, useful for business analytics.
     * Removed items do not contribute to the total transaction amount, and are not displayed nor
     * on the receipt. This is set by the service.
     */
    virtual bool getRemoved() const = 0;

    /**
     * The unique ID for this merchandise item as it exists in the basket. If multiple items with
     * the same SKU/UPC are added individually to the basket, this basket item ID will be used to
     * distinguish between them. This will be generated by the service if not provided.
     */
    virtual void setBasketItemId(const std::optional<std::string> & itemId) = 0;

    /**
     * The sequence for this item. This is generally auto-incremented as items are added to the
     * basket. This is generally set by the underlying service, but can be set manually if required.
     */
    virtual void setSequence(int32_t sequence) = 0;

    /**
     * The display order for this item. This is generally auto-incremented as items are added to
     * the basket, using a gap value to allow insertion between items at a later time.
     */
    virtual void setDisplayOrder(int32_t displayOrder) = 0;

    /**
     * The line to display to the customer. This may include standard tab and line break characters
     * if desired for normal text, or this may use HTML formatting. This will be generated by the
     * service if not provided.
     */
    virtual void setDisplayLine(const std::optional<std::string> & displayLine) = 0;

    /** A human-readable name. This is optional. */
    virtual void setName(const std::optional<std::string> & name) = 0;

    /** A human-readable description. This is optional. */
    virtual void setDescription(const std::optional<std::string> & description) = 0;

    /** SKU of the item. This is optional. */
    virtual void setSku(const std::optional<std::string> & sku) = 0;

    /** EAN / UPC of the item. This is optional. */
    virtual void setUpc(const std::optional<std::string> & upc) = 0;

    /**
     * The final total amount for this item as a GAAP-standard BigDecimal, including the
     * extendedPrice, tax, and discount. This is required.
     */
    virtual void setAmount(const std::optional<Decimal> & amount) = 0;

    /**
     * The tax for this merchandise based on total quantity as a GAAP-standard BigDecimal. This
     * is optional.
     */
    virtual void setTax(const std::optional<Decimal> & tax) = 0;

    /**
     * Set to true if this item was removed from the basket, useful for business analytics.
     * Removed items do not contribute to the total transaction amount, and are not displayed nor
     * on the receipt. This is set by the service.
     */
    virtual void setRemoved(bool removed) = 0;

    /** Returns the amounts for this item in the basket. */
    virtual std::shared_ptr<AmountTotals> getAmounts() const = 0;

    /** Set the amounts for this item. */
    virtual void setAmounts(const std::shared_ptr<AmountTotals> & amounts) = 0;

    /** Refer to the {@link #setUnitPrice(BigDecimal unitPrice) setUnitPrice(BigDecimal unitPrice)}. */
    virtual std::optional<Decimal> getUnitPrice() const = 0;

    /** Refer to {@link #setQuantity(BigDecimal quantity) setQuantity(int quantity)}. */
    virtual std::optional<Decimal> getQuantity() const = 0;

    virtual std::optional<std::string> getUnitOfMeasurement() const = 0;

    /**  Refer to {@link #setExtendedPrice(BigDecimal extendedPrice) setExtendedPrice(BigDecimal extendedPrice)} */
    virtual std::optional<Decimal> getExtendedPrice() const = 0;

    /** Refer to the {@link #setDiscount(BigDecimal discount) setDiscount(BigDecimal discount)}. */
    virtual std::optional<Decimal> getDiscount() const = 0;

    /** Returns the modifiers attached to this merchandise. Returns an empty array if there are none. */
    virtual std::vector<std::shared_ptr<Modifier>> getModifiers() const = 0;

    /** The price per unit as a GAAP-standard BigDecimal. This is required. */
    virtual void setUnitPrice(const std::optional<Decimal> & price) = 0;

    /** The number of units. Defaults to 1 if not set. */
    virtual void setQuantity(const std::optional<Decimal> & quantity) = 0;

    /** The unit of Measurement for Quantity value */
    virtual void setUnitOfMeasurement(const std::optional<std::string> & unitOfMeasurement) = 0;

    /** The product of unitPrice and quantity as a GAAP-standard BigDecimal. This is optional. */
    virtual void setExtendedPrice(const std::optional<Decimal> & price) = 0;

    /** The discount amount for the total quantity as a GAAP-standard BigDecimal. This is optional. */
    virtual void setDiscount(const std::optional<Decimal> & discount) = 0;

    /** Attaches a modifier to this item, returning success/failure based on ArrayList add. */
    virtual bool attachModifier(const std::shared_ptr<Modifier> & modifier) = 0;

    /** Removes a modifier from this item, returning success/failure based on ArrayList remove. */
    virtual bool removeModifier(const std::shared_ptr<Modifier> & modifier) = 0;

    /** update merchandise */
    virtual void update(const std::shared_ptr<Merchandise> & merchandise) = 0;
};

}  // namespace verifone_sdk
