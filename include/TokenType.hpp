// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from Tokens.djinni

#pragma once

#include <functional>
#include <string>

namespace verifone_sdk {

enum class TokenType : int {
    /** A token only for analytics/identifying the account. Cannot be used for payments. */
    ANALYTICS,
    /**
     * A token to be reused for payments, using just the token value for reuse. This token is never
     * format-preserving, instead it uses a UUID format to identify the account.
     */
    REUSE,
    /**
     * A token to be reused for payments when the scheme is provided. This token can be
     * format-preserving, depending on the configuration of the tokenization service.
     */
    REUSE_WITH_SCHEME,
    /** A token unique to this particular transaction. */
    TRANSACTION,
    /** Token supplied by the network. */
    NETWORK,
};

constexpr std::string_view toString(const TokenType& arg) {
    switch(arg) {
        case TokenType::ANALYTICS: return "ANALYTICS";
        case TokenType::REUSE: return "REUSE";
        case TokenType::REUSE_WITH_SCHEME: return "REUSE_WITH_SCHEME";
        case TokenType::TRANSACTION: return "TRANSACTION";
        case TokenType::NETWORK: return "NETWORK";
        default: return "TokenType enum value not supported";
    }
}

}  // namespace verifone_sdk

namespace std {

template <>
struct hash<::verifone_sdk::TokenType> {
    size_t operator()(::verifone_sdk::TokenType type) const {
        return std::hash<int>()(static_cast<int>(type));
    }
};

}  // namespace std
