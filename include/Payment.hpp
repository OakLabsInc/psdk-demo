// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from com_verifone_commerce_entities.djinni

#pragma once

#include <memory>
#include <optional>
#include <string>
#include <unordered_map>
#include <vector>

namespace verifone_sdk {

class AmountTotals;
class CardInformation;
class Image;
class Installment;
class Receipt;
class StoredValueCardInformation;
enum class AuthorizationMethod;
enum class AuthorizationResult;
enum class PaymentType;
enum class PresentationMethod;
enum class ReceiptType;
enum class TokenizationMethod;
enum class TransactionType;
struct Decimal;

/** Represents an individual payment within the context of the transaction */
class Payment {
public:
    virtual ~Payment() {}

    /**
     * Factory method to create a payment instance. Please note that the Amounts
     * and RequestedAmounts instances are also created at this time with empty values.
     */
    static std::shared_ptr<Payment> create();

    /**
     * The payment id, set by the gateway/processor or the alternate payment type provider.
     * For cash payments, this might be set to the local payment ID.
     */
    virtual std::optional<std::string> getPaymentId() const = 0;

    /**
     * An ID generated and assigned by the POS for managing the payment events.
     * This ID is only relevant to the POS, and is used by the POS' internal
     * tracking. This enables a PaymentCompletedEvent to be matched to a specific
     * payment within the POS' own reporting system.
     */
    virtual std::optional<std::string> getLocalPaymentId() const = 0;

    /**
     * Get the related payment ID of the payment that was refunded or voided. For
     * example, Payment1 is made, and the customer desires a refund. Payment2
     * will be created for the refund, and the payment ID from Payment1 will be
     * set as the reference payment ID of Payment2. For voids, refunds, and other
     * follow-on payments, this is required if the AppSpecificData from the
     * original payment is not provided, otherwise this is optional.
     */
    virtual std::optional<std::string> getReferencePaymentId() const = 0;

    /**
     * Get the related local payment ID of the payment that was refunded or
     * voided. See getReferencePaymentId() for more information on how a
     * reference ID is used, and getLocalPaymentId() for more information on how
     * the local ID is used. This may be empty.
     */
    virtual std::optional<std::string> getReferenceLocalPaymentId() const = 0;

    /**
     * Get the ID of the invoice. This is set when the payment is initiated
     * and may not be changed. This may be empty.
     */
    virtual std::optional<std::string> getInvoice() const = 0;

    /**
     * Get the ID of the venue. This is set when the transaction is initiated
     * and may not be changed. This may be empty.
     */
    virtual std::optional<std::string> getVenue() const = 0;

    /**
     * Get the ID or name of the current device. This is set when the transaction is
     * initiated and may not be changed. This may be empty.
     */
    virtual std::optional<std::string> getLane() const = 0;

    /**
     * Get the ID of the cashier, this should be set when the transaction is
     * initiated and may not be changed. This may be empty.
     */
    virtual std::optional<std::string> getCashierId() const = 0;

    /** The payment type used to complete this payment. This may be empty. */
    virtual std::optional<PaymentType> getPaymentType() const = 0;

    /** The method used to pay. This may be empty. */
    virtual std::optional<std::string> getPaymentMethod() const = 0;

    /** Get the ways by which the payment is authorized. This may be empty. */
    virtual std::optional<AuthorizationMethod> getAuthorizationMethod() const = 0;

    /**
     * Get Result of transaction authorization. This is provided by the payment
     * application or payment service provider. This may be empty.
     */
    virtual std::optional<AuthorizationResult> getAuthResult() const = 0;

    /**
     * Get The payment Authorization Code, it usually provided by the payment processing
     * service or acquirer.This may be added during the transaction, but once set should
     * not be changed.
     */
    virtual std::optional<std::string> getAuthCode() const = 0;

    /**
     * Get descriptive text accompanying the authorization code from payment processor.
     * This is usually present when the transaction has failed authorization, providing
     * the reason for the failure. This is optional.
     */
    virtual std::optional<std::string> getAuthResponseText() const = 0;

    /**
     * Gets the requested card presentation methods.  Valid presentation methods include:
     * {@link CardInformation.PresentationMethod# MAG_STRIPE},
     * {@link CardInformation.PresentationMethod# CHIP},
     * {@link CardInformation.PresentationMethod# CTLS_CARD} (note that this will allow
     * any type of CTLS presentation),
     * {@link CardInformation.PresentationMethod# KEYED}
     * This is optional and if no presentation methods are requested, by default all card
     * presentation methods supported by the device hardware will be allowed.
     */
    virtual std::vector<PresentationMethod> getRequestedCardPresentationMethods() const = 0;

    /** Get whether is gift card */
    virtual bool isStoredValueCard() const = 0;

    /**
     * If the payment involves a card / contactless, this provides the
     * relevant information. This might be empty.
     */
    virtual std::shared_ptr<CardInformation> getCardInformation() const = 0;

    /** Get stored card information, if the payment involves a gift card. */
    virtual std::shared_ptr<StoredValueCardInformation> getStoredValueCardInformation() const = 0;

    /**
     * Stores the information necessary to perform other operations on this payment at a later
     * time, such as completing a pre-auth or refunding a specific payment. If the payment object
     * is stored offline, only this field must be saved and restored to complete later operations.
     * This field is limited to 255 characters, and the value should not be modified.
     */
    virtual std::optional<std::string> getAppSpecificData() const = 0;

    /**
     * Get the amount of the payment was approved for as a GAAP-standard BigDecimal. This is
     * provided set during the authorization process.
     */
    virtual std::optional<Decimal> getPaymentAmount() const = 0;

    /** Get the amount of gratuity or Tip if applicable as a GAAP-standard BigDecimal. This is optional */
    virtual std::optional<Decimal> getGratuityAmount() const = 0;

    /** Get the amount of tax as a GAAP-standard BigDecimal. This is optional */
    virtual std::optional<Decimal> getTaxAmount() const = 0;

    /**
     * Get the amount of cashback  as a GAAP-standard BigDecimal. This is optional.
     * This may also refer to a cash advance amount, based on the payment type.
     */
    virtual std::optional<Decimal> getCashbackAmount() const = 0;

    /** Get the amount of fees  as a GAAP-standard BigDecimal. */
    virtual std::optional<Decimal> getFeesAmount() const = 0;

    /**
     * Get the number of units of alternate currency consumed, in the case of an alternate
     * payment type. This is optional.
     */
    virtual std::optional<std::string> getRedeemedUnits() const = 0;

    /**
     * Get the receipts for the payment after the payment is completed. This is possibly empty or
     * only containg one type depending on the success of the payment and the configuration of the
     * payment application.
     */
    virtual std::unordered_map<ReceiptType, std::shared_ptr<Receipt>> getReceipts() const = 0;

    /**
     * Get the signature image provided by the payment application if the Authorization
     * Method contains Signature. This will be empty for all other Authorization Methods.
     */
    virtual std::shared_ptr<Image> getSignature() const = 0;

    /**
     * Get the timestamp of payment completion. This is provided by the application which
     * processes the payment.
     */
    virtual std::optional<std::string> getTimestamp() const = 0;

    /**
     * True if the payment was authorized online with the host, or false if this was
     * authorized offline.
     */
    virtual bool isOnline() const = 0;

    /** The ID of the acquirer used for the payment. This may be empty. */
    virtual std::optional<std::string> getAcquirerId() const = 0;

    /** The name of the acquirer used for the payment. This may be empty. */
    virtual std::optional<std::string> getAcquirerName() const = 0;

    /** Get Merchant identifier */
    virtual std::optional<std::string> getMerchantId() const = 0;

    /** Get Terminal identifier */
    virtual std::optional<std::string> getTerminalId() const = 0;

    /** Refer to setTotalsGroupId(). */
    virtual std::optional<std::string> getTotalsGroupId() const = 0;

    /**
     * Get the approved amounts in the payment.  Please note that these amounts are
     * independent from the requested amounts.
     */
    virtual std::shared_ptr<AmountTotals> getAmounts() const = 0;

    /**
     * Get the requested payment amounts, set when a payment is requested by the POS
     * and independent from the approved amounts.
     */
    virtual std::shared_ptr<AmountTotals> getRequestedAmounts() const = 0;

    /**
     * Refer to {@link #setInstallment(Installment)}
     * @return Installment object containing installment related information.
     */
    virtual std::shared_ptr<Installment> getInstallment() const = 0;

    /** Refer to {@link #setTransactionType} */
    virtual std::optional<TransactionType> getTransactionType() const = 0;

    /** Get the reconciliation id, set by the nexo payment response  */
    virtual std::optional<std::string> getReconciliationId() const = 0;

    /**
     * Set payment ID, This is set by the gateway/processor in the case of a credit/debit
     * payment, or the alternate payment type provider. For cash payments, this may be
     * set to the local payment ID.
     */
    virtual void setPaymentId(const std::optional<std::string> & paymentId) = 0;

    /** Additional acquirer data */
    virtual std::optional<std::string> getAdditionalAcquirerData() const = 0;

    /** Refer to setContextData(). */
    virtual std::optional<std::string> getContextData() const = 0;

    /**
     * True if this was forced offline, false if it was explicitly forced online,
     * otherwise this is empty.
     */
    virtual std::optional<bool> isForceOffline() const = 0;

    /** See getLocalPaymentId() for information on how this is used. This is optional. */
    virtual void setLocalPaymentId(const std::optional<std::string> & paymentId) = 0;

    /** The Retrieval Reference Number from the payment/reversal response. This may be empty. */
    virtual std::optional<std::string> getRetrievalReferenceNumber() const = 0;

    /** See getReferencePaymentId() for information on how this is used. This is optional. */
    virtual void setReferencePaymentId(const std::optional<std::string> & paymentId) = 0;

    /** See getReferenceLocalPaymentId() for information on how this is used. This is optional. */
    virtual void setReferenceLocalPaymentId(const std::optional<std::string> & paymentId) = 0;

    /**
     * Set the ID of the invoice. This is set when the payment is initiated and
     * may not be changed. This may be empty.
     */
    virtual void setInvoice(const std::optional<std::string> & invoice) = 0;

    /**
     * Set the ID of the venue. This is set when the payment is initiated and
     * may not be changed. This may be empty.
     */
    virtual void setVenue(const std::optional<std::string> & venue) = 0;

    /**
     * Set the ID or name of the current lane. This is set when the payment is
     * initiated and may not be changed. This may be empty.
     */
    virtual void setLane(const std::optional<std::string> & lane) = 0;

    /** Set the ID of the cashier that is starting this payment. This is optional. */
    virtual void setCashierId(const std::optional<std::string> & cashierId) = 0;

    /**
     * Request a specific type of payment. This is required to bypass the payment selection screen
     * when the payment application is handling the payment, otherwise this is optional.
     */
    virtual void setRequestedPaymentType(std::optional<PaymentType> paymentType) = 0;

    /** Refer to {@link #setRequestedPaymentType(paymentType)}. */
    virtual std::optional<PaymentType> getRequestedPaymentType() const = 0;

    /** The payment type used to complete this payment. */
    virtual void setPaymentType(std::optional<PaymentType> paymentType) = 0;

    /**
     * This is required for the application which processes the payment, and is generally not
     * set by the POS.
     */
    virtual void setPaymentMethod(const std::optional<std::string> & paymentMethod) = 0;

    /** Set the ways by which the payment is authorized. This is optional */
    virtual void setAuthorizationMethod(std::optional<AuthorizationMethod> authorizationMethod) = 0;

    /**
     * Result of transaction authorization. This is provided by the payment application or
     * payment service provider. This may be empty.
     */
    virtual void setAuthResult(std::optional<AuthorizationResult> authorizationResult) = 0;

    /**
     * Set The payment Authorization Code, it usually provided by the payment processing
     * service or acquirer.This may be added during the transaction, but once set should
     * not be changed.
     */
    virtual void setAuthCode(const std::optional<std::string> & authCode) = 0;

    /**
     * Set descriptive text accompanying the authorization code from payment processor.
     * This is usually present when the transaction has failed authorization, providing
     * the reason for the failure. This is optional.
     */
    virtual void setAuthResponseText(const std::optional<std::string> & responseText) = 0;

    /**
     * Sets the requested card presentation methods.  Valid presentation methods include:
     * {@link CardInformation.PresentationMethod# MAG_STRIPE},
     * {@link CardInformation.PresentationMethod# CHIP},
     * {@link CardInformation.PresentationMethod# CTLS_CARD} (note that this will allow any
     * type of CTLS presentation),
     * {@link CardInformation.PresentationMethod# KEYED}
     * This is optional and if no presentation methods are requested, by default all card
     * presentation methods supported by the device hardware will be allowed.
     * @param requestedCardPresentationMethods The requested card presentation methods
     */
    virtual void setRequestedCardPresentationMethods(const std::vector<PresentationMethod> & presentationMethods) = 0;

    /**
     * Request a specific type of token. This is required to receive a token when the payment is
     * completed.
     */
    virtual void setRequestedTokenizationMethod(TokenizationMethod tokenizationMethod) = 0;

    /** Refer to {@link #setRequestedTokenizationMethod(tokenizationMethod)}. */
    virtual std::optional<TokenizationMethod> getRequestedTokenizationMethod() const = 0;

    /**
     * Set card information if the card information is known by the POS, such as when
     * a token is being used, otherwise this should be empty.
     */
    virtual void setCardInformation(const std::shared_ptr<CardInformation> & cardInformation) = 0;

    /**
     * Set stored card information if the payment involves a gift or other stored value card
     * and the POS already knows the card information to be used for the payment, otherwise
     * this should be empty.
     */
    virtual void setStoredValueCardInformation(const std::shared_ptr<StoredValueCardInformation> & cardInformation) = 0;

    /**
     * Set the data from a previous payment object to perform another operation on that payment
     * or to look up a specific payment when querying transactions.
     */
    virtual void setAppSpecificData(const std::optional<std::string> & data) = 0;

    /**
     * Set the number of units of alternate currency consumed, in the case of an alternate
     * payment type. This is optional.
     */
    virtual void setRedeemedUnits(const std::optional<std::string> & units) = 0;

    /**
     * Set the receipt for a payment. This is set by the application which processes the payment,
     * so that the required transaction data can be present on the final receipt, otherwise
     * this is not used. This is automatically added to the return receipts map according to the
     * type of the receipt, which means that setting the receipt with the same type a second time
     * will replace any other receipt with the same type that was already stored.
     */
    virtual void setReceipt(const std::shared_ptr<Receipt> & receipt) = 0;

    /**
     * Set the image of the signature collected from the payee. This is provided by the
     * application which processes the payment.
     */
    virtual void setSignature(const std::shared_ptr<Image> & image) = 0;

    /**
     * Set the timestamp of payment completion. This is provided by the application that
     * performs the authorization with the host.
     */
    virtual void setTimestamp(const std::optional<std::string> & timestamp) = 0;

    /** Set by the application that performs the authorization with the host. */
    virtual void setOnline(bool online) = 0;

    /**
     * Set the acquirer identifier to be used for this payment if there are multiple acquirers
     * configured.
     */
    virtual void setAcquirerId(const std::optional<std::string> & acquirerId) = 0;

    /** Set the acquirer name */
    virtual void setAcquirerName(const std::optional<std::string> & acquirerName) = 0;

    /**
     * Set the MID for the acquirer. This is generally configured within
     * the payment application, and is not set by the POS.
     */
    virtual void setMerchantId(const std::optional<std::string> & merchantId) = 0;

    /**
     * Set the TID for the acquirer. This is generally configured within
     * the payment application, and is not set by the POS
     */
    virtual void setTerminalId(const std::optional<std::string> & terminalId) = 0;

    /**
     * Group this payment to other payments by an arbitrary ID. This is useful for looking up
     * payments later and for creating reports. This must be set before
     * performing the payment.
     */
    virtual void setTotalsGroupId(const std::optional<std::string> & totalsGroupId) = 0;

    /**
     * Set the amounts for the customer, either to be charged to the customer or cleared from
     * the customer, depending on the transaction type. This is required.
     */
    virtual void setRequestedAmounts(const std::shared_ptr<AmountTotals> & amountTotals) = 0;

    /**
     * Set the payment/transaction to an installment type and sets the installment information
     * Refer to {@link Installment}.
     */
    virtual void setInstallment(const std::shared_ptr<Installment> & installment) = 0;

    /**
     * This provides a mechanism for the POS to set the
     * type of transaction being requested.
     */
    virtual void setTransactionType(std::optional<TransactionType> transactionType) = 0;

    /** Set additional acquirer data */
    virtual void setAdditionalAcquirerData(const std::optional<std::string> & acquirerData) = 0;

    /**
     * An arbitrary string set by the POS to provide context or state information back to itself
     * when the payment is completed. This is optional.
     */
    virtual void setContextData(const std::optional<std::string> & contextData) = 0;

    /**
     * Set to true to force the current payment to be authorized offline, set to false to force the
     * payment to be performed online, or empty to let the payment application decide. This is only
     * a recommendation, it is possible for the payment application configuration to override this
     * value.
     */
    virtual void setForceOffline(std::optional<bool> forceOffline) = 0;

    /** Set by the application which authorizes the payment with the host. */
    virtual void setRetrievalReferenceNumber(const std::optional<std::string> & retrievalReferenceNumber) = 0;

    /**
     * An optional string set as an reconciliation id provided by the host, acquirer, or terminal 
     * indicating which batch will settle this payment when settlement is performed.
     */
    virtual void setReconciliationId(const std::optional<std::string> & reconciliationId) = 0;
};

}  // namespace verifone_sdk
