// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from SdiManager.djinni

#pragma once

#include <cstdint>
#include <memory>
#include <optional>
#include <vector>

namespace verifone_sdk {

class SdiControlCallback;
class SdiNavigatorCallback;
class SdiNotifyCallback;
class SdiStatusCallback;
struct SdiReceivedMessage;

/** The service handle for communicating with a device over sdi. */
class SdiManager {
public:
    virtual ~SdiManager() {}

    /**
     *
     * Callbacks
     *
     * Set status callback.
     * See {@link SdiStatusCallback}
     */
    virtual void setStatusCallback(const std::shared_ptr<SdiStatusCallback> & callback) = 0;

    /**
     * Set control callback.
     * See {@link SdiControlCallback}
     */
    virtual void setControlCallback(const std::shared_ptr<SdiControlCallback> & callback) = 0;

    /**
     * Set notify callback.
     * See {@link SdiNotifyCallback}
     */
    virtual void setNotifyCallback(const std::shared_ptr<SdiNotifyCallback> & callback) = 0;

    /**
     * Set navigator callback.
     * See {@link SdiNavigatorCallback}
     */
    virtual void setNavigatorCallback(const std::shared_ptr<SdiNavigatorCallback> & callback) = 0;

    /**
     *
     * Low Level commands
     *
     * Send SDI message
     *
     * param cmd class and instruction of the command to be sent
     * param p1p2 P1 and P2 of the command to be sent
     * param data command data
     * return 0 in case of success, -1 in case of failure
     */
    virtual int32_t sendMessage(int32_t cmd, std::optional<int32_t> p1p2, const std::optional<std::vector<uint8_t>> & data) = 0;

    /**
     * Receive SDI reply with internal handling of SDI callbacks.
     *
     * return see {@link SdiReceivedMessage}
     */
    virtual SdiReceivedMessage receiveMessage() = 0;

    /**
     * Send SDI reply for an SDI callback message.
     *
     * param cmd class and instruction of the reply to be sent
     * param data command data
     * return 0 in case of success, -1 in case of failure
     */
    virtual int32_t sendReply(int32_t cmd, const std::optional<std::vector<uint8_t>> & data) = 0;
};

}  // namespace verifone_sdk
