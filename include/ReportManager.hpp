// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from com_verifone_commerce_payment_reports.djinni

#pragma once

#include <cstdint>
#include <memory>
#include <optional>
#include <psdk/export.h>
#include <string>
#include <vector>

namespace verifone_sdk {

class Status;
class TransactionQuery;

/**
 * Requests various types of reports and other status information. Allows closure of the current
 * reporting period, querying of the reporting capabilities of the terminal, and
 * settlement/reconciliation with the host/acquirer(s). Please note that the events for these
 * methods are sent to general listeners, as these commands are sent outside of the context of a session.
 */
class PSDK_EXPORT ReportManager {
public:
    virtual ~ReportManager() {}

    /**
     * If capable, the terminal can provide back the report when calling
     * {@link #getActiveTotals()}.
     */
    static std::string const GET_ACTIVE_TOTALS_CAPABILITY;

    /**
     * If capable, the terminal can provide back the report when calling
     * {@link #getTotalsForGroup()}.
     */
    static std::string const GET_GROUP_TOTALS_CAPABILITY;

    /**
     * If capable, the terminal tracks reporting periods and allows closing of the
     * current period.
     */
    static std::string const CLOSE_PERIOD_CAPABILITY;

    /**
     * If capable, this can request a report from the terminal to allow synchronizing
     * report information.
     */
    static std::string const TERMINAL_RECONCILIATION_CAPABILITY;

    /**
     * If capable, this can ask the terminal to initiate a settlement between the
     * host and acquirer, or the terminal and acquirer.
     */
    static std::string const ACQUIRER_RECONCILIATION_CAPABILITY;

    /** If capable, this can recover the results of a previous reconciliation. */
    static std::string const PREVIOUS_RECONCILIATION_CAPABILITY;

    /**
     * If capable, this can query transactions when calling
     * {@link #queryTransactions(TransactionQuery)}.
     */
    static std::string const TRANSACTION_QUERY_CAPABILITY;

    /**
     * If capable, the terminal can provide back the totals for a specific groupID when calling
     * {@link #getTotalsForGroup()}.
     */
    static std::string const TOTALS_GROUP_ID_CAPABILITY;

    /**
     * If capable, this can close current period and reconcile when calling
     * {@link #closePeriodAndReconcile()}.
     */
    static std::string const CLOSE_PERIOD_AND_RECONCILE_CAPABILITY;

    /**
     * If capable, this will allow you to get previous reconciliation when calling
     * {@link #getPreviousReconciliation(String)}.
     */
    static std::string const GET_PREVIOUS_RECONCILIATION_CAPABILITY;

    /**
     * If capable, the terminal can provide a list of reconciliations when calling
     * {@link #getReconciliationsList()}.
     */
    static std::string const RECONCILIATION_LIST_CAPABILITY;

    /**
     * If capable, the terminal can provide a reconciliations report which is 
     * requested by the POS when calling {@link #loginWithCredentials()}.
     */
    static std::string const RECONCILIATION_REPORT_CAPABILITY;

    /**
     * Checks if the current terminal interface allows handling of 
     * a specific command, as itemized below. Returns true if the 
     * interface can handle the command, or false if not.
     * The following are the commands whose capabilities
     * may be checked via this command:
     * {@link #GET_ACTIVE_TOTALS_CAPABILITY},
     * {@link #GET_GROUP_TOTALS_CAPABILITY},
     * {@link #CLOSE_PERIOD_CAPABILITY},
     * {@link #TERMINAL_RECONCILIATION_CAPABILITY},
     * {@link #ACQUIRER_RECONCILIATION_CAPABILITY},
     * {@link #PREVIOUS_RECONCILIATION_CAPABILITY},
     * {@link #TRANSACTION_QUERY_CAPABILITY},
     * {@link #TRANSACTION_QUERY_BY_PAYMENT_CAPABILITY},
     * {@link #TRANSACTION_QUERY_FILTER_FIELDS_CAPABILITY},
     * {@link #TRANSACTION_QUERY_PAYMENT_ID_BOUNDS_CAPABILITY},
     * {@link #TOTALS_GROUP_ID_CAPABILITY},
     * {@link #CLOSE_PERIOD_AND_RECONCILE_CAPABILITY},
     * {@link #GET_PREVIOUS_RECONCILIATION_CAPABILITY},
     * {@link #RECONCILIATION_LIST_CAPABILITY},
     * {@link #RECONCILIATION_REPORT_CAPABILITY}.
     */
    virtual bool isCapable(const std::string & capability) = 0;

    /**
     * Provides the transactions totals realised since the beginning of the current
     * reconciliation period until the reception of this request. This is also called
     * a pre-settlement report.  Fires a {@link ReconciliationEvent} with type
     * {@link ReconciliationEvent#ACTIVE_TOTALS_TYPE} to the listener. The current
     * reconciliation period is never closed by this message, please
     * use {@link #closePeriod()}, {@link #closePeriodAndReconcile()}, or
     * {@link #closePeriodAndReconcile(int[])} to close the period.
     */
    virtual std::shared_ptr<Status> getActiveTotals() = 0;

    /** Provides capability to specify items to search for in {@link #getActiveTotals()}. */
    virtual std::shared_ptr<Status> getActiveTotalsWithQuery(const std::shared_ptr<TransactionQuery> & query) = 0;

    /**
     * Provides the transactions totals for a specific Totals Group ID, as
     * specified on the payment object. When getTotalsForGroup is called
     * with a null group ID, the most recent group ID is used by default,
     * and if there is no recent group ID, then an error is returned.
     * Fires a {@link ReconciliationEvent} with type {@link ReconciliationEvent#GROUP_TOTALS_TYPE}
     * to the listener.
     */
    virtual std::shared_ptr<Status> getTotalsForGroup(const std::optional<std::string> & groupId) = 0;

    /**
     * When the terminal tracks reporting periods, this closes the current period and
     * fires a {@link ReconciliationEvent} containing a report for the closed period
     * to general listeners.
     * @return The success/failure for sending the command.
     */
    virtual std::shared_ptr<Status> closePeriod() = 0;

    /**
     * When the terminal tracks reporting periods, this closes the current period on
     * the terminal, triggers reconciliation with the acquirer(s), and fires a
     * {@link ReconciliationEvent} containing a report for the closed period.
     * @param acquirers An optional array of the specific acquirer IDs with which to
     * reconcile, or null if the terminal should attempt to reconcile with all.
     * @return The success/failure for sending the command. Registered listeners will
     * receive the actual result.
     */
    virtual std::shared_ptr<Status> closePeriodAndReconcile(const std::optional<std::vector<int32_t>> & acquirers) = 0;

    /**
     * Reconciles the terminal or host with the acquirer(s). Fires a
     * {@link ReconciliationEvent} to the listener, containing the success or failure
     * of the synchronization, but this does not necessarily include specific period
     * information, only if the reconciliation was successfully communicated to the
     * host / acquirer(s).
     * @param acquirers An optional array of the specific acquirer IDs with which to
     * reconcile, or null if the terminal should attempt to reconcile with all.
     * @return The success/failure for sending the command. Registered listeners will
     * receive the actual result.
     */
    virtual std::shared_ptr<Status> reconcileWithAcquirers(const std::optional<std::vector<int32_t>> & acquirers) = 0;

    /**
     * Retrieves a list of reconciliations that have either already been performed or are currently
     * pending. Fires a {@link ReconciliationsListEvent} to the listener containing the results. This
     * is particularly useful when the terminal or the host automatically performs reconciliation with
     * the acquirer. This is also useful in combination with
     * {@link #getPreviousReconciliation(String)}, to first query all of the reconciliations and
     * then to get the report for a specific reconciliation.
     * @return The success/failure for sending the command. The registered listener will receive the
     * actual result.
     */
    virtual std::shared_ptr<Status> getReconciliationsList() = 0;

    /**
     * Resends the {@link ReconciliationEvent} for a previous reconciliation. This
     * event will include an unsuccessful status if the reconciliation ID was not
     * valid or could not be retrieved.
     * @param reconciliationId The ID of the previous reconciliation that should be
     * recovered.
     * @return The success/failure for sending the command. Registered listeners will
     * receive the actual result.
     */
    virtual std::shared_ptr<Status> getPreviousReconciliation(const std::optional<std::string> & reconciliationId) = 0;

    /**
     * Performs the query, firing a {@link TransactionQueryEvent} once the query is
     * complete. This can be performed outside of the context of a session. Returns
     * the success/failure for sending the command. Registered listeners will receive
     * the actual result.
     */
    virtual std::shared_ptr<Status> queryTransactions(const std::shared_ptr<TransactionQuery> & query) = 0;
};

}  // namespace verifone_sdk
