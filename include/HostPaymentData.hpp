// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from com_verifone_commerce_host_adapter.djinni

#pragma once

#include "CardEncryptionType.hpp"
#include "InstrumentType.hpp"
#include <optional>
#include <string>
#include <unordered_map>
#include <utility>

namespace verifone_sdk {

/**
 * The Payment Data object is introduced to reflect the nexo/ISO20022 structure that encapsulates
 * the data elements required to execute the required transaction, such as the Instrument used e.g.
 * card and the authentication details (e.g. the actual signature or the encrypted PIN block if
 * captured).
 */
struct HostPaymentData final {
    /** Customer Billing Address Street */
    std::optional<std::string> billingStreet;
    /**
     * Customer Billing Address City
     *   Name of a built-up area, with defined boundaries, and a local government. This could be
     *   city or town.
     */
    std::optional<std::string> billingCity;
    /**
     * Customer Billing Address Country Subdivision
     *   Identifies a sub-division of a country which may be state, region or county.
     */
    std::optional<std::string> billingCountrySubdivision;
    /**
     * Customer Billing Address Postal Code
     *   Identifier consisting of a group of letters and/or numbers that is added to a postal
     *   address to assist the sorting of mail
     */
    std::optional<std::string> billingPostCode;
    /**
     * Customer Billing Address Country
     *   The ISO 3166-1 alpha-3 country code.
     */
    std::optional<std::string> billingCountry;
    /**
     * Encrypted PIN. (Personal Identification Number). The PIN data associated with the Card holder
     * or Customer (where known). This value should be an encrypted representation of the PIN. This
     * is attribute ISO8583 DE52. This value can never be persisted or logged.
     * Authentication Online PinData EncryptedPINBlock
     *   The encrypted PIN content as a string.
     */
    std::optional<std::string> pinEncrytpedData;
    /**
     * Authentication Online PinData EncryptedPINBlock
     *   The KSN is a constructed element that has multiple parts. In DUKPT 2009 this identification
     *   information is referred to as a Key Serial Number (KSN) sent by the initiator of the
     *   message to uniquely identify the derived key at the recipient. This is the first 5 bytes
     *   of the KSN. The structure should follow the standard:
     *
     *       Issuer Identification Number - 3 bytes
     *       Merchant ID - 1 byte
     *       Group ID - 1 byte
     *       Device ID - 19 bits
     *       Transaction Counter 21 bits.
     */
    std::optional<std::string> pinKeySerialNumber;
    /**
     * To identify the type of instrument whether it is a card, token or other...
     *  see {@link InstrumentType}
     */
    std::optional<InstrumentType> instrumentType;
    /** The masked value for the Card Number. */
    std::optional<std::string> maskedCardNumber;
    /**
     * To identify the type of encryptionKey whether it is a Verifone keys, Acquirer/Customer keys
     * or none.
     */
    std::optional<std::unordered_map<std::string, std::string>> cardDataEmvTags;
    /**
     * Encryption Type
     *   {@link #CardEncryptionType()}
     */
    std::optional<CardEncryptionType> cardDataEncryptionType;
    /** <Encrypted Blob> Base-64 converted variable length blob. */
    std::optional<std::string> cardDataTrack2;
    /**
     * Track2 Key Serial Number
     *   NOTE: This is optional. If encryption is based on the encryption used
     */
    std::optional<std::string> cardDataTrack2Ksn;
    /** PAN - Used for Manual Entry */
    std::optional<std::string> cardDataPan;
    /**
     * PAN Key Serial Number - Used for Manual Entry
     *   NOTE: This is optional. If encryption is based on the encryption used
     */
    std::optional<std::string> cardDataPanKsn;
    /** Expiry - Used for Manual Entry */
    std::optional<std::string> cardDataExpiry;
    /**
     * Expiry Key Serial Number - Used for Manual Entry
     *   NOTE: This is optional. If encryption is based on the encryption used
     */
    std::optional<std::string> cardDataExpiryKsn;
    /** CVV - Used for Manual Entry */
    std::optional<std::string> cardDataCvv;
    /**
     * CVV Key Serial Number - Used for Manual Entry
     *   NOTE: This is optional. If encryption is based on the encryption used
     */
    std::optional<std::string> cardDataCvvKsn;
    /**
     * Represents a Card type or brand. It should correspond to a consistent name, the list of
     * constants is in {@link CardInformation}
     */
    std::optional<std::string> cardBrand;
    /**
     * The product name associated with the card brand. e.g. Classic, Standard, Gold, Platinum,
     * World. This must correspond to an actual product name.
     */
    std::optional<std::string> cardproduct;

    HostPaymentData(std::optional<std::string> billingStreet_,
                    std::optional<std::string> billingCity_,
                    std::optional<std::string> billingCountrySubdivision_,
                    std::optional<std::string> billingPostCode_,
                    std::optional<std::string> billingCountry_,
                    std::optional<std::string> pinEncrytpedData_,
                    std::optional<std::string> pinKeySerialNumber_,
                    std::optional<InstrumentType> instrumentType_,
                    std::optional<std::string> maskedCardNumber_,
                    std::optional<std::unordered_map<std::string, std::string>> cardDataEmvTags_,
                    std::optional<CardEncryptionType> cardDataEncryptionType_,
                    std::optional<std::string> cardDataTrack2_,
                    std::optional<std::string> cardDataTrack2Ksn_,
                    std::optional<std::string> cardDataPan_,
                    std::optional<std::string> cardDataPanKsn_,
                    std::optional<std::string> cardDataExpiry_,
                    std::optional<std::string> cardDataExpiryKsn_,
                    std::optional<std::string> cardDataCvv_,
                    std::optional<std::string> cardDataCvvKsn_,
                    std::optional<std::string> cardBrand_,
                    std::optional<std::string> cardproduct_)
    : billingStreet(std::move(billingStreet_))
    , billingCity(std::move(billingCity_))
    , billingCountrySubdivision(std::move(billingCountrySubdivision_))
    , billingPostCode(std::move(billingPostCode_))
    , billingCountry(std::move(billingCountry_))
    , pinEncrytpedData(std::move(pinEncrytpedData_))
    , pinKeySerialNumber(std::move(pinKeySerialNumber_))
    , instrumentType(std::move(instrumentType_))
    , maskedCardNumber(std::move(maskedCardNumber_))
    , cardDataEmvTags(std::move(cardDataEmvTags_))
    , cardDataEncryptionType(std::move(cardDataEncryptionType_))
    , cardDataTrack2(std::move(cardDataTrack2_))
    , cardDataTrack2Ksn(std::move(cardDataTrack2Ksn_))
    , cardDataPan(std::move(cardDataPan_))
    , cardDataPanKsn(std::move(cardDataPanKsn_))
    , cardDataExpiry(std::move(cardDataExpiry_))
    , cardDataExpiryKsn(std::move(cardDataExpiryKsn_))
    , cardDataCvv(std::move(cardDataCvv_))
    , cardDataCvvKsn(std::move(cardDataCvvKsn_))
    , cardBrand(std::move(cardBrand_))
    , cardproduct(std::move(cardproduct_))
    {}
};

}  // namespace verifone_sdk
