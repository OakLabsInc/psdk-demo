// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from com_verifone_commerce_payment.djinni

#pragma once

#include <cstdint>
#include <memory>
#include <optional>
#include <psdk/export.h>
#include <string>
#include <vector>

namespace verifone_sdk {

class LoyaltyAdjustment;
class LoyaltyReceivedEventResponse;
class Offer;
class Payment;
class Transaction;

/**
 * When loyalty offers and IDs are added by applications in response to the
 * {@link com.verifone.commerce.triggers.LoyaltyRequest} Trigger, the list is returned in this
 * event. This allows the POS application to keep track of changes and provides the opportunity to
 * filter which offers and loyalty accounts are applied to the final transaction.
 */
class PSDK_EXPORT LoyaltyReceivedEvent {
public:
    virtual ~LoyaltyReceivedEvent() {}

    /** Loyalty received event type */
    static std::string const TYPE;

    /**
     * A user-readable message.
     * This message may not be localized, in which case the type field should be used for
     * determining a localized message.
     */
    virtual std::optional<std::string> getMessage() const = 0;

    /** Get the session ID for the session which triggered this event. */
    virtual std::optional<std::string> getSessionId() const = 0;

    /**
     * The type of status. This will generally be SUCCESS for a status of 0, and contain a
     * different type for other errors. For example, in a refund or void, it is possible to
     * receive type TRANSACTION_NOT_FOUND. This may be used for localizing the specific
     * messages as needed
     */
    virtual std::optional<std::string> getType() const = 0;

    /**
     * Get the status for this particular event. A status of 0 means success,
     * any other status is a failure.
     */
    virtual int32_t getStatus() const = 0;

    /**
     * Returns the event ID associated with this event. Useful for matching the event received by
     * the listener to the original status returned when issuing the call, for example, calling
     * {@link com.verifone.commerce.payment.TransactionManager#reprintReceipt(Payment)} returns a
     * CommerceEvent containing an event ID, which will match the event ID received by the
     * CommerceListener when the receipt reprint is complete. 
     */
    virtual std::optional<std::string> getEventId() const = 0;

    /** The ID for loyalty record */
    virtual std::optional<std::string> getLoyaltyId() const = 0;

    /** The invoice ID for the transaction as a reference. */
    virtual std::optional<std::string> getInvoiceId() const = 0;

    /** The transaction associated with this event. */
    virtual std::shared_ptr<Transaction> getTransaction() const = 0;

    /** Get the list of adjustments that have been added by various other applications. */
    virtual std::vector<std::shared_ptr<LoyaltyAdjustment>> getLoyaltyAdjustments() const = 0;

    /** Gets all of the offers aggregated into one list, making it easier to apply all. */
    virtual std::vector<std::shared_ptr<Offer>> getLoyaltyOffersList() const = 0;

    /** Get the appropriate payment object that led to this adjustment. */
    virtual std::shared_ptr<Payment> getPayment() const = 0;

    /** Generates a LoyaltyReceivedResponse object for return to the service. */
    virtual std::shared_ptr<LoyaltyReceivedEventResponse> generateLoyaltyReceivedEventResponse() const = 0;
};

}  // namespace verifone_sdk
