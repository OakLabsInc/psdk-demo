// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from com_verifone_commerce_payment_reports.djinni

#pragma once

#include <cstdint>
#include <memory>
#include <optional>
#include <string>
#include <vector>

namespace verifone_sdk {

class Payment;

/**
 * Allows the payment terminal transaction status to be queried. The most recent transaction can
 * always be queried, but the capability checks are extremely important for other types of queries,
 * as the support for these queries will vary between regions and hosts.
 */
class TransactionQuery {
public:
    virtual ~TransactionQuery() {}

    /** If capable, the fields returned can be filtered to a subset */
    static std::string const TRANSACTION_QUERY_FILTER_FIELDS_CAPABILITY;

    /** If capable, the startPaymentId and endPaymentId can be used to query transactions. */
    static std::string const TRANSACTION_QUERY_PAYMENT_ID_BOUNDS_CAPABILITY;

    /** If capable, the setPaymentIds or setPayments can be used to query transactions. */
    static std::string const TRANSACTION_QUERY_BY_PAYMENT_CAPABILITY;

    /** factory methord to create TransactionQuery instance */
    static std::shared_ptr<TransactionQuery> create();

    /** Optionally set a start time in milliseconds from Epoch. */
    virtual void setStartTime(std::optional<int64_t> startTime) = 0;

    /** Optionally set an end time in milliseconds from Epoch. */
    virtual void setEndTime(std::optional<int64_t> endTime) = 0;

    /**
     * Optionally search starting at a specific payment ID. This can work when the payment ID is a
     * value that increments, otherwise the behavior is undetermined. This must not be used with
     * a collection of payment IDs or payments.
     */
    virtual void setStartPaymentId(const std::optional<std::string> & startPaymentId) = 0;

    /**
     * Optionally search ending at a specific payment ID. This can work when the payment ID is a
     * value that increments, otherwise the behavior is undetermined. This must not be used with
     * a collection of payment IDs or payments.
     */
    virtual void setEndPaymentId(const std::optional<std::string> & endPaymentId) = 0;

    /**
     * Search for a collection of payment IDs, only returning results that are contained in this
     * collection. This should not be used with a collection of payments or a start/end payment ID.
     */
    virtual void setPaymentIds(const std::vector<std::string> & paymentIds) = 0;

    /**
     * Remove a specific set of payment IDs from the query. Refer to
     * {@link #setPaymentIds(Collection)} for more information.
     */
    virtual void removePaymentIds(const std::vector<std::string> & paymentIds) = 0;

    /**
     * Adds a single payment ID to the list for searching. Refer to
     * {@link #setPaymentIds(Collection)} for more information.
     */
    virtual void addPaymentId(const std::optional<std::string> & paymentId) = 0;

    /**
     * Removes a single payment ID to the list for searching. Refer to
     * {@link #setPaymentIds(Collection)} for more information.
     */
    virtual void removePaymentId(const std::optional<std::string> & paymentId) = 0;

    /**
     * Search for a collection of payments, only returning results that directly match the payments
     * provided in this collection. This may only use the payment ID to perform the query, or it may
     * perform more extensive checks and searches, depending on the region and the host. This
     * should not be used with a collection of payment IDs or a start/end payment ID.
     */
    virtual void setPayments(const std::vector<std::shared_ptr<Payment>> & payments) = 0;

    /**
     * Remove a specific set of payments from the query. Refer to
     * {@link #setPayments(Collection)} for more information.
     */
    virtual void removePayments(const std::vector<std::shared_ptr<Payment>> & payments) = 0;

    /**
     * Add a specific payment to the query. Refer to
     * {@link #setPayments(Collection)} for more information.
     */
    virtual void addPayment(const std::shared_ptr<Payment> & payment) = 0;

    /**
     * Remove a specific payment from the query. Refer to
     * {@link #setPayments(Collection)} for more information.
     */
    virtual void removePayment(const std::shared_ptr<Payment> & payment) = 0;

    /**
     * Allows the results to be filtered to only retrieve a certain subset of fields. This does not
     * guarantee the presence of a specific field, as the query may not be able to provide that
     * field. To add a field for retrieval, use the java.lang.reflect package to get the name of a
     * specific public "getter" field. Example:
     * {@code Transaction.class.getMethod("getInvoiceId").getName()}
     */
    virtual void setFieldsToRetrieve(const std::vector<std::string> & fieldsToRetrieve) = 0;

    /**
     * Limits the query to check on transactions that were processed offline, returning their
     * current status.
     */
    virtual void setOffline(std::optional<bool> offline) = 0;

    /**
     * Limits the query to transactions within a specific shift. The shift must be specified when
     * logging in.
     */
    virtual void setShiftId(const std::optional<std::string> & shiftId) = 0;

    /**
     * Limits the query to transactions linked to a specific user. The user ID must be specified
     * when logging in, or set on the {@link com.verifone.commerce.entities.Transaction} object for
     * a session.
     */
    virtual void setUserId(const std::optional<std::string> & userId) = 0;

    /** Limit the query to only return this many results. A limit of <= 0 means no limit. */
    virtual void setLimit(std::optional<int32_t> limit) = 0;

    /**
     * Request the query to start at offset.
     * Supported at {@link com.verifone.Constants#SDK_PARCEL_VERSION} 14
     */
    virtual void setOffset(std::optional<int32_t> offset) = 0;

    /**
     * Sets the query to retrieve only the most recent transaction. This transaction may still be
     * in progress, it is best to check the returned values to determine if the transaction is
     * still being processed or is complete.
     */
    virtual void setQueryingLastTransaction(bool isQueryingLastTransaction) = 0;

    /** A unique identifier for this query. */
    virtual std::optional<std::string> getQueryId() const = 0;

    /**
     * Gets the start time in milliseconds from Epoch if it is set.
     * Refer to {@link #setStartTime(long)}.
     */
    virtual std::optional<int64_t> getStartTime() const = 0;

    /**
     * Gets the end time in milliseconds from Epoch if it is set.
     * Refer to {@link #setEndTime(long)}.
     */
    virtual std::optional<int64_t> getEndTime() const = 0;

    /** Gets the start PaymentId. Refer to {@link #setStartPaymentId(String)}. */
    virtual std::optional<std::string> getStartPaymentId() const = 0;

    /** Gets the end PaymentId. Refer to {@link #setEndPaymentId(String)}. */
    virtual std::optional<std::string> getEndPaymentId() const = 0;

    /**
     * Returns the collection of payment IDs.
     * Refer to {@link #setPaymentIds(Collection)}.
     */
    virtual std::vector<std::string> getPaymentIds() const = 0;

    /** Refer to {@link #setPayments(Collection)}. */
    virtual std::vector<std::shared_ptr<Payment>> getPayments() const = 0;

    /** Refer to {@link #setFieldsToRetrieve(Collection)}. */
    virtual std::vector<std::string> getFieldsToRetrieve() const = 0;

    /** Refer to {@link #setOffline(boolean)}. */
    virtual std::optional<bool> isOffline() const = 0;

    /** Refer to {@link #setShiftId(String)}. */
    virtual std::optional<std::string> getShiftId() const = 0;

    /** Refer to {@link #setUserId(String)}. */
    virtual std::optional<std::string> getUserId() const = 0;

    /** Refer to {@link #setLimit(int)}. */
    virtual std::optional<int32_t> getLimit() const = 0;

    /** Returns the offset set by setOffset. Refer to {@link #setOffset(int)}. */
    virtual std::optional<int32_t> getOffset() const = 0;

    /** Returns true if this is simply retrieving the information on the most recent transaction. */
    virtual bool isQueryingLastTransaction() const = 0;
};

}  // namespace verifone_sdk
