// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from com_verifone_commerce_payment.djinni

#pragma once

#include <cstdint>
#include <memory>
#include <optional>
#include <psdk/export.h>
#include <string>

namespace verifone_sdk {

class Transaction;
class TransactionEventResponse;
enum class DeviceManagementAction;

/**
 * Received when a specific {@link DeviceManagementAction} has been sent to do something on the
 * payment terminal.
 */
class PSDK_EXPORT DeviceManagementEvent {
public:
    virtual ~DeviceManagementEvent() {}

    /** Device management event type */
    static std::string const TYPE;

    /** Encrypted Message */
    static std::string const ENCRYPTED_MESSAGE_KEY;

    /** Initialization Vector for the encryption performed. */
    static std::string const INITIALIZATION_VECTOR_KEY;

    /** Key Serial Number */
    static std::string const KSN_KEY;

    /** VCL Track 1 data */
    static std::string const TRACK1_KEY;

    /** VCL Track 2 data */
    static std::string const TRACK2_KEY;

    /** VCL EPARMS data */
    static std::string const EPARMS_KEY;

    /** VSP Firmware Version */
    static std::string const VSP_FIRMWARE_VERSION_KEY;

    /** VSP MDK Label */
    static std::string const MDK_LABEL_KEY;

    /** VSP Encryption State */
    static std::string const ENCRYPTION_STATE_KEY;

    /** VSP State */
    static std::string const VSP_STATE_KEY;

    /** VSP Mode */
    static std::string const VSP_MODE_KEY;

    /** VSP BIN Table ID */
    static std::string const BIN_TABLE_ID_KEY;

    /** VSP Encryption Algorithm */
    static std::string const ENCRYPTION_ALGORITHM_KEY;

    /** VSP operation mode */
    static std::string const OPERATION_MODE_KEY;

    /** VSP initial key id */
    static std::string const INITIAL_KEY_ID_KEY;

    /** VSP config id */
    static std::string const CONFIG_ID_KEY;

    /**
     * A user-readable message.
     * This message may not be localized, in which case the type field should be used for
     * determining a localized message.
     */
    virtual std::optional<std::string> getMessage() const = 0;

    /** Get the session ID for the session which triggered this event. */
    virtual std::optional<std::string> getSessionId() const = 0;

    /**
     * The type of status. This will generally be SUCCESS for a status of 0, and contain a
     * different type for other errors. For example, in a refund or void, it is possible to
     * receive type TRANSACTION_NOT_FOUND. This may be used for localizing the specific
     * messages as needed
     */
    virtual std::optional<std::string> getType() const = 0;

    /**
     * Get the status for this particular event. A status of 0 means success,
     * any other status is a failure.
     */
    virtual int32_t getStatus() const = 0;

    /**
     * Returns the event ID associated with this event. Useful for matching the event received by
     * the listener to the original status returned when issuing the call, for example, calling
     * {@link com.verifone.commerce.payment.TransactionManager#reprintReceipt(Payment)} returns a
     * CommerceEvent containing an event ID, which will match the event ID received by the
     * CommerceListener when the receipt reprint is complete. 
     */
    virtual std::optional<std::string> getEventId() const = 0;

    /** The invoice ID for the transaction as a reference. */
    virtual std::optional<std::string> getInvoiceId() const = 0;

    /** The transaction associated with this event. */
    virtual std::shared_ptr<Transaction> getTransaction() const = 0;

    /**
     * Generate transaction event response for the current event.
     * @return empty response when a standard transaction event. Child classes may implement
     * appropriate responses as needed.
     */
    virtual std::shared_ptr<TransactionEventResponse> generateTransactionEventResponse() const = 0;

    /** Get Device Management Action type */
    virtual DeviceManagementAction getActionType() const = 0;

    /**
     * Get mapped DeviceManagementEvent values based on
     * selected key values. Map includes VCL encryption 
     * such as track1, track2, and EPARMS values, as well
     * as VSP configuration values. Returns null if the
     * key is not present in the map.
     */
    virtual std::optional<std::string> getValue(const std::string & key) const = 0;
};

}  // namespace verifone_sdk
