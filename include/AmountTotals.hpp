// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from AmountTotals.djinni

#pragma once

#include <memory>
#include <optional>
#include <psdk/export.h>
#include <string>
#include <unordered_map>

namespace verifone_sdk {

struct Decimal;

/** A container for the various totals. */
class PSDK_EXPORT AmountTotals {
public:
    virtual ~AmountTotals() {}

    /**
     * Create an amount totals object. If unset is true, then none of the amounts
     * default to 0, otherwise the total and possibly other values will be set to 0.
     */
    static std::shared_ptr<AmountTotals> create(bool unset);

    /** Returns the subtotal if set, otherwise returns null. */
    virtual std::optional<Decimal> getSubtotal() const = 0;

    /** Returns the general tax if set, otherwise returns null. */
    virtual std::optional<Decimal> getTax() const = 0;

    /** Returns the amount that is being paid as a tip or gratuity if set, otherwise returns null. */
    virtual std::optional<Decimal> getGratuity() const = 0;

    /** Returns the amount that is being paid as fees if set, otherwise returns null. */
    virtual std::optional<Decimal> getFees() const = 0;

    /** Returns the amount that is being paid as donation if set, otherwise returns null. */
    virtual std::optional<Decimal> getDonation() const = 0;

    /** Returns the amount that is being returned as cashback if set, otherwise returns null. */
    virtual std::optional<Decimal> getCashback() const = 0;

    /**
     * Returns the grand total, which is (subtotal + tax(es) + gratuity + any other amounts)
     * if set, otherwise returns null.
     */
    virtual std::optional<Decimal> getTotal() const = 0;

    /**
     * Returns true if all of getTotal(), getSubtotal(), getTax(),
     * getGratuity(), and getTaxesWithCodes() are null.
     */
    virtual bool isUnset() const = 0;

    /**
     * Returns the actual instance for the map that stores the taxes
     * and codes. This object is not
     * thread-safe.
     */
    virtual std::unordered_map<std::string, Decimal> getTaxesWithCodes() const = 0;

    /** Set all of the amounts at once, overriding any previous setting. */
    virtual void setWithAmounts(const std::optional<Decimal> & subtotal, const std::optional<Decimal> & tax, const std::optional<Decimal> & gratuity, const std::optional<Decimal> & fees, const std::optional<Decimal> & cashback, const std::optional<Decimal> & donation, const std::optional<Decimal> & total) = 0;

    /**
     * Sets the subtotal, which normally does not include taxes and gratuity depending on the region.
     * This is optional but highly recommended.
     */
    virtual void setSubtotal(const std::optional<Decimal> & subtotal) = 0;

    /**
     * Sets the general tax amount. Acts as a wrapper for calling
     * {@link #addTaxWithCode(String, BigDecimal)} with a null tax code. This
     * should not be used in conjunction with {@link #setTaxesWithCodes(HashMap)}.
     */
    virtual void setTax(const std::optional<Decimal> & tax) = 0;

    /** Sets the amount that is being paid as a tip or gratuity. */
    virtual void setGratuity(const std::optional<Decimal> & gratuity) = 0;

    /**
     * Set the amount of cashback  as a GAAP-standard BigDecimal.
     * This may also refer to a cash advance amount, based on the payment type.
     */
    virtual void setCashback(const std::optional<Decimal> & cashback) = 0;

    /** Set the amount of fees  as a GAAP-standard BigDecimal. */
    virtual void setFees(const std::optional<Decimal> & fees) = 0;

    /** Set the amount of donations  as a GAAP-standard BigDecimal. */
    virtual void setDonation(const std::optional<Decimal> & donation) = 0;

    /** Sets the grand total, which is (subtotal + tax(es) + gratuity + any other amounts). */
    virtual void setTotal(const std::optional<Decimal> & total) = 0;

    /**
     * Sets the taxes with codes all at once. Use either this or
     * {@link #addTaxWithCode(String, BigDecimal)}.
     */
    virtual void setTaxesWithCodes(const std::unordered_map<std::string, Decimal> & taxesWithCodes) = 0;

    /**
     * Inserts this amount for this code if it is not already present,
     * or replaces it if the tax code is already present. If the amount is null,
     * removes the tax code from the map if it exists, otherwise it does nothing.
     * If the tax code is null, the amount is considered to be the total tax being applied.
     */
    virtual void addTaxWithCode(const std::string & taxCode, const std::optional<Decimal> & taxAmount) = 0;

    /** Adds the specified values to the existing values. */
    virtual void addAmounts(const std::optional<Decimal> & subtotal, const std::optional<Decimal> & tax, const std::optional<Decimal> & gratuity, const std::optional<Decimal> & fees, const std::optional<Decimal> & cashback, const std::optional<Decimal> & donation, const std::optional<Decimal> & total) = 0;

    /** Subtracts the specified values from the existing values. */
    virtual void subtractAmounts(const std::optional<Decimal> & subtotal, const std::optional<Decimal> & tax, const std::optional<Decimal> & gratuity, const std::optional<Decimal> & fees, const std::optional<Decimal> & cashback, const std::optional<Decimal> & donation, const std::optional<Decimal> & total) = 0;
};

}  // namespace verifone_sdk
