// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from com_verifone_commerce_payment.djinni

#pragma once

#include <cstdint>
#include <memory>
#include <optional>
#include <string>

namespace verifone_sdk {

class RequestParameters;
class Transaction;
class UserInputEventResponse;
class Values;
enum class InputType;

/** Either contains the information requested from the customer, or enables sending a response to collect information from the cashier. */
class UserInputEvent {
public:
    virtual ~UserInputEvent() {}

    /**
     * The type when responding to the
     * {@link TransactionManager#requestUserInput(String, String, String)} or the
     * {@link TransactionManager#presentUserOptions(String, String[])} methods.
     */
    static std::string const RECEIVED_TYPE;

    /** The type when the terminal/POI is requesting input from the cashier. */
    static std::string const REQUEST_TYPE;

    /**
     * @Deprecated
     * Use {@link #RECEIVED_TYPE} instead.
     */
    static std::string const TYPE;

    /** Enables querying if the device supports masking the input. */
    static std::string const INPUT_MASK_CAPABILITY;

    /**
     * A user-readable message.
     * This message may not be localized, in which case the type field should be used for
     * determining a localized message.
     */
    virtual std::optional<std::string> getMessage() const = 0;

    /** Get the session ID for the session which triggered this event. */
    virtual std::optional<std::string> getSessionId() const = 0;

    /** The event type, either {@link #RECEIVED_TYPE} or {@link #REQUEST_TYPE}. */
    virtual std::optional<std::string> getType() const = 0;

    /** Get the status for this particular event. A status of 0 means success, any other status is a failure. */
    virtual int32_t getStatus() const = 0;

    /**
     * Returns the event ID associated with this event. Useful for matching the event received by
     * the listener to the original status returned when issuing the call, for example, calling
     * {@link com.verifone.commerce.payment.TransactionManager#reprintReceipt(Payment)} returns a
     * CommerceEvent containing an event ID, which will match the event ID received by the
     * CommerceListener when the receipt reprint is complete.
     */
    virtual std::optional<std::string> getEventId() const = 0;

    /** The invoice ID for the transaction as a reference. */
    virtual std::optional<std::string> getInvoiceId() const = 0;

    /** The transaction associated with this event. */
    virtual std::shared_ptr<Transaction> getTransaction() const = 0;

    /**
     * If {@link #getType()} is {@link #TYPE}, returns the requested input type, else if this is
     * the {@link #REQUEST_TYPE}, returns the input type that is being requested.
     */
    virtual InputType getInputType() const = 0;

    /**
     * If {@link #getType()} is {@link #TYPE}, returns the default value from the original request,
     * otherwise this returns the requested default value.
     */
    virtual std::optional<std::string> getDefaultValue() const = 0;

    /** Returns the current {@link RequestParameters} if this is of type {@link #REQUEST_TYPE}. */
    virtual std::shared_ptr<RequestParameters> getRequestParameters() const = 0;

    /**
     * If {@link #getType()} is {@link #TYPE}, returns the values as collected by the terminal,
     * otherwise this will be null.
     */
    virtual std::shared_ptr<Values> getValues() const = 0;

    /** Generates response for UserInputEvent */
    virtual std::shared_ptr<UserInputEventResponse> generateUserInputEventResponse() const = 0;
};

}  // namespace verifone_sdk
