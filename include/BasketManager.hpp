// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from com_verifone_commerce_payment.djinni

#pragma once

#include <memory>
#include <string>
#include <vector>

namespace verifone_sdk {

class AmountTotals;
class Basket;
class BasketEvent;
class Donation;
class Merchandise;
class Modifier;
class Offer;

/**
 * The manager for the basket attached to a transaction. This is used when a basket 
 * is involved in a transaction, but is not required to process a simple sale.
 */
class BasketManager {
public:
    virtual ~BasketManager() {}

    /** Returns the session Id associated with this basket. */
    virtual std::string getSessionId() = 0;

    /**
     * Allows attaching a pre-existing basket to the current transaction. This 
     * returns an error if a basket has already been opened and has items.
     * @return The status indicating success or failure.
     */
    virtual std::shared_ptr<BasketEvent> registerBasket(const std::shared_ptr<Basket> & basket, const std::shared_ptr<AmountTotals> & totals) = 0;

    /**
     * Lets the payment application know that the POS has finished with the initial 
     * basket and can allow other applications to make adjustments via the 
     * REQUEST_BASKET_ADJUSTMENT trigger. The attached transaction listeners will 
     * be notified if any changes are made, and can respond with a finalized basket 
     * directly to the event. After closing the basket, no further actions
     * should be performed on it using the basket manager.
     * @return The status indicating success or failure.
     */
    virtual std::shared_ptr<BasketEvent> finalizeBasket() = 0;

    /**
     * Removes all items in the basket and resets the basket state to open.
     * @return The status indicating success or failure.
     */
    virtual std::shared_ptr<BasketEvent> purgeBasket() = 0;

    /**
     * Returns the current basket that is associated with the transaction.
     * @return The current basket for the transaction.
     */
    virtual std::shared_ptr<Basket> getBasket() = 0;

    /** Returns the current tracked Amount Totals. */
    virtual std::shared_ptr<AmountTotals> getCurrentAmountTotals() = 0;

    /**
     * Adds the items to the basket, notifying listening applications and updating 
     * the display.
     * @param merchandise The items to add to the basket.
     * @param amountTotals The total running amounts to display on the 
     * customer-facing screen. If null, automatically calculated based on the 
     * merchandise.
     * @return The status indicating if the item was successfully added after 
     * sending the add request to the display. This does not return information 
     * regarding the display.
     */
    virtual std::shared_ptr<BasketEvent> addMerchandise(const std::vector<std::shared_ptr<Merchandise>> & merchandise, const std::shared_ptr<AmountTotals> & amountTotals) = 0;

    /**
     * Removes the items from the basket, notifying listening applications and 
     * updating the display. Uses the Basket Item ID to remove the proper items.
     * @param merchandise The items to remove.
     * @param amountTotals The total running amounts to display on the
     * customer-facing screen. If null, automatically calculated based on the 
     * merchandise.
     * @return The status indicating if the item was successfully removed after 
     * sending the removal request to the display. This does not return information 
     * regarding the display.
     */
    virtual std::shared_ptr<BasketEvent> removeMerchandise(const std::vector<std::shared_ptr<Merchandise>> & merchandise, const std::shared_ptr<AmountTotals> & amountTotals) = 0;

    /**
     * Modifies the items in the basket, notifying listening applications and 
     * updating the display. Uses the Basket Item ID to apply the new values.
     * @param merchandise The items to modify with the new values, but containing 
     * the existing Basket Item ID.
     * @param amountTotals The total running amounts to display on the 
     * customer-facing screen. This should be explicitly set, as the basket cannot 
     * automatically calculate the difference when modifying the item as it exists 
     * in the basket.
     * @return The status indicating if the modification was successfully sent to 
     * the display.  This does not return information regarding the display.
     */
    virtual std::shared_ptr<BasketEvent> modifyMerchandise(const std::vector<std::shared_ptr<Merchandise>> & merchandise, const std::shared_ptr<AmountTotals> & amountTotals) = 0;

    /**
     * Adds a modifier to an existing merchandise object.
     * @param modifier The modifer to add to this merchandise object. 
     * @param merchandise The items to modify with the new values, but containing 
     * the existing Basket Item ID.
     * @param amountTotals The total running amounts to display on the 
     * customer-facing screen.  
     */
    virtual std::shared_ptr<BasketEvent> addModifierToMerchandise(const std::shared_ptr<Modifier> & modifier, const std::shared_ptr<Merchandise> & merchandise, const std::shared_ptr<AmountTotals> & amountTotals) = 0;

    /**
     * Removes a modifier from an existing merchandise object.
     * @param modifier The modifer to remove from this merchandise object. 
     * @param merchandise The items to modify with the new values, but containing 
     * the existing Basket Item ID.
     * @param amountTotals The total running amounts to display on the 
     * customer-facing screen.  
     */
    virtual std::shared_ptr<BasketEvent> removeModifierFromMerchandise(const std::shared_ptr<Modifier> & modifier, const std::shared_ptr<Merchandise> & merchandise, const std::shared_ptr<AmountTotals> & amountTotals) = 0;

    /**
     * add offers (coupons, discounts, loyalty, etc.) to the existing basket object.
     * @param offers The list of offers to be added to the basket.
     * @param amountTotals The total running amounts to display on the 
     * customer-facing screen.
     */
    virtual std::shared_ptr<BasketEvent> addOffers(const std::vector<std::shared_ptr<Offer>> & offers, const std::shared_ptr<AmountTotals> & amountTotals) = 0;

    /**
     * remove offers (coupons, discounts, loyalty, etc.) from the existing basket 
     * object.
     * @param offers The list of offers to be removed from the basket.
     * @param amountTotals The total running amounts to display on the 
     * customer-facing screen.
     */
    virtual std::shared_ptr<BasketEvent> removeOffers(const std::vector<std::shared_ptr<Offer>> & offers, const std::shared_ptr<AmountTotals> & amountTotals) = 0;

    /**
     * modify offers (coupons, discounts, loyalty, etc.) attached to the existing 
     * basket object.
     * @param offers The list of offers to be modified in the basket.
     * @param amountTotals The total running amounts to display on the 
     * customer-facing screen.
     */
    virtual std::shared_ptr<BasketEvent> modifyOffers(const std::vector<std::shared_ptr<Offer>> & offers, const std::shared_ptr<AmountTotals> & amountTotals) = 0;

    /**
     * add donations to the existing basket object.
     * @param offers The list of donationss to be added to the basket.
     * @param amountTotals The total running amounts to display on the 
     * customer-facing screen.
     */
    virtual std::shared_ptr<BasketEvent> addDonations(const std::vector<std::shared_ptr<Donation>> & donations, const std::shared_ptr<AmountTotals> & amountTotals) = 0;

    /**
     * remove donations from the existing basket object.
     * @param offers The list of donations to be removed from the basket.
     * @param amountTotals The total running amounts to display on the 
     * customer-facing screen.
     */
    virtual std::shared_ptr<BasketEvent> removeDonations(const std::vector<std::shared_ptr<Donation>> & donations, const std::shared_ptr<AmountTotals> & amountTotals) = 0;

    /**
     * modify donations attached to the existing basket object.
     * @param offers The list of donations to be modified in the basket.
     * @param amountTotals The total running amounts to display on the 
     * customer-facing screen.
     */
    virtual std::shared_ptr<BasketEvent> modifyDonations(const std::vector<std::shared_ptr<Donation>> & donations, const std::shared_ptr<AmountTotals> & amountTotals) = 0;
};

}  // namespace verifone_sdk
