// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from com_verifone_commerce_payment.djinni

#pragma once

#include <memory>
#include <optional>
#include <string>
#include <vector>

namespace verifone_sdk {

class AmountAdjustment;
class CommerceResponse;
class Payment;
class Transaction;
class TransactionEventResponse;

class AmountAdjustedEventResponse {
public:
    virtual ~AmountAdjustedEventResponse() {}

    /** Return TransactionEventResponse from the provided response */
    static std::shared_ptr<TransactionEventResponse> asTransactionEventResponse(const std::shared_ptr<AmountAdjustedEventResponse> & amountAdjustedEventResponse);

    /** Generate CommerceResponse from the provided response */
    static std::shared_ptr<CommerceResponse> asCommerceResponse(const std::shared_ptr<AmountAdjustedEventResponse> & amountAdjustedEventResponse);

    /**
     * Set the actual adjustments that are being applied to the transaction. Passing null
     * removes any adjustments. This assumes that any recalculation of totals are being
     * performed separately by updating the payment and transaction objects directly, or by
     * using the {@link #applyAdjustments(AmountAdjustment[])} method.
     */
    virtual void setAdjustments(const std::optional<std::vector<std::shared_ptr<AmountAdjustment>>> & adjustments) = 0;

    /**
     * Sets the adjustments and performs the calculations to change the appropriate amounts.
     * Please note, this does not change the tax amount, only the total amounts for both the
     * transaction and the current payment.
     */
    virtual void applyAdjustments(const std::optional<std::vector<std::shared_ptr<AmountAdjustment>>> & adjustments) = 0;

    /**
     * Returns the payment object that started the amount adjustment process. To update this,
     * either update this object directly or use {@link #updatePayment(Payment)};
     */
    virtual std::shared_ptr<Payment> getPayment() const = 0;

    /** Update the payment object with the appropriate amounts and set it here. */
    virtual void updatePayment(const std::shared_ptr<Payment> & payment) = 0;

    /** Returns invoice id from event */
    virtual std::optional<std::string> getInvoiceId() const = 0;

    /** Return Transaction from event */
    virtual std::shared_ptr<Transaction> getTransaction() const = 0;

    /** Update transaction from response */
    virtual void updateTransaction(const std::shared_ptr<Transaction> & transaction) = 0;
};

}  // namespace verifone_sdk
