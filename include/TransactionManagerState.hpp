// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from com_verifone_commerce_payment.djinni

#pragma once

#include <functional>
#include <string>

namespace verifone_sdk {

enum class TransactionManagerState : int {
    /**
     * The current state is unknown or otherwise unrecognized. This will 
     * rarely happen. 
     */
    UNKNOWN,
    /**
     * There is not currently a login session active, which may or may not 
     * be a problem.
     */
    NOT_LOGGED_IN,
    /** A login has been initiated and is currently being attempted. */
    LOGGING_IN,
    /** A login has been initiated and was accepted. */
    LOGGED_IN,
    /** There is not a session active. */
    SESSION_CLOSED,
    /** A session is currently being opened. */
    SESSION_OPENING,
    /**
     * A session is open, and may already have basket items or even 
     * payments processed. 
     */
    SESSION_OPEN,
    /**
     * A payment is being processed, which may or may not require further 
     * interaction from the customer or cashier.
     */
    PAYMENT_PROCESSING,
};

constexpr std::string_view toString(const TransactionManagerState& arg) {
    switch(arg) {
        case TransactionManagerState::UNKNOWN: return "UNKNOWN";
        case TransactionManagerState::NOT_LOGGED_IN: return "NOT_LOGGED_IN";
        case TransactionManagerState::LOGGING_IN: return "LOGGING_IN";
        case TransactionManagerState::LOGGED_IN: return "LOGGED_IN";
        case TransactionManagerState::SESSION_CLOSED: return "SESSION_CLOSED";
        case TransactionManagerState::SESSION_OPENING: return "SESSION_OPENING";
        case TransactionManagerState::SESSION_OPEN: return "SESSION_OPEN";
        case TransactionManagerState::PAYMENT_PROCESSING: return "PAYMENT_PROCESSING";
        default: return "TransactionManagerState enum value not supported";
    }
}

}  // namespace verifone_sdk

namespace std {

template <>
struct hash<::verifone_sdk::TransactionManagerState> {
    size_t operator()(::verifone_sdk::TransactionManagerState type) const {
        return std::hash<int>()(static_cast<int>(type));
    }
};

}  // namespace std
